{:profiles
 {:goku {:default true
         :alone   80 ; hold for .. ms to register single tap
         :held    50 ; TODO: not sure what it's for
         :delay   0 ; time after which the key press is delayed
         :sim     30}} ; keys need to be pressed within this threshold to be considered simultaneous
 :templates {
             :alfred "osascript -e 'tell application id \"com.runningwithcrayons.Alfred\" to run trigger \"%s\" in workflow \"%s\" with argument \"%s\"'"
             :km "osascript -e 'tell application \"Keyboard Maestro Engine\" to do script \"%s\"'"
             :raycast "open -g \"raycast://extensions/%s\""
             :open "open \"%s\""
             :open-g "open -g \"%s\""
             :shell "%s"
             }
 :simlayers {
             :backslash-mode {:key :non_us_backslash}
             :1-mode {:key :1}
             :2-mode {:key :2}
             :3-mode {:key :3}
             :4-mode {:key :4}
             :7-mode {:key :7}
             :8-mode {:key :8}
             :9-mode {:key :9}
             :0-mode {:key :0}
             :hyphen-mode {:key :hyphen}
             :equal-sign-mode {:key :equal_sign}
             :tab-mode {:key :tab}
             :q-mode {:key :q}
             :w-mode {:key :w}
             :e-mode {:key :e}
             :r-mode {:key :r}
             :t-mode {:key :t}
             :u-mode {:key :u}
             :y-mode {:key :y}
             :i-mode {:key :i}
             :o-mode {:key :o}
             :p-mode {:key :p}
             :open-bracket-mode {:key :open_bracket}
             :close-bracket-mode {:key :close_bracket}
             :a-mode {:key :a}
             :s-mode {:key :s}
             :d-mode {:key :d}
             :f-mode {:key :f}
             :g-mode {:key :g}
             :semicolon-mode {:key :semicolon}
             :quote-mode {:key :quote}
             :escape-mode {:key :escape}
             :tilde-mode {:key :grave_accent_and_tilde}
             :z-mode {:key :z}
             :x-mode {:key :x}
             :c-mode {:key :c}
             :v-mode {:key :v}
             :b-mode {:key :b}
             :n-mode {:key :n}
             :m-mode {:key :m}
             :comma-mode {:key :comma}
             :slash-mode {:key :slash}
             :dot-mode {:key :period}
             ;:left-shift-mode {:key :left_shift} ; TODO: does not work in practice
             :left-control-mode {:key :left_control}
             :spacebar-mode {:key :spacebar}
             :right-command-mode {:key :right_command}
             :ts-mode {:key :period :condi ["in-ts" 1]}
             :rust-mode {:key :period :condi ["in-rust" 1]}
             :swift-mode {:key :period :condi ["in-swift" 1]}
             :go-mode {:key :period :condi ["in-go" 1]}
             :py-mode {:key :period :condi ["in-python" 1]}
             }
 :main [
        {:des "colonkey (shift)"
         :rules [:semicolon-mode
                 [:1 :!T1]
                 [:2 :!T2]
                 [:3 :!T3]
                 [:4 :!T4]
                 [:5 :!T5]
                 [:6 :!T6]
                 [:7 :!T7]
                 [:q :!Sq]
                 [:w :!Sw]
                 [:e :!Se]
                 [:r :!Sr]
                 [:t :!St]
                 [:y :!Sy]
                 [:u :!Su]
                 [:i :!Si]
                 [:o :!So]
                 [:p :!Sp]
                 [:escape [:km "open: Safari Technology Preview (search GitHub)"]]
                 [:a :!Sa]
                 [:s :!Ss]
                 [:d :!Sd]
                 [:f :!Sf]
                 [:g :!Sg]
                 [:h :!Sh]
                 [:j :!Sj]
                 [:k :!Sk]
                 [:l :!Sl]
                 [:z :!Sz]
                 [:x :!Sx]
                 [:c :!Sc]
                 [:v :!Sv]
                 [:b :!Sb]
                 [:n :!Sn]
                 [:left_command [:km "open: Sourcegraph"]]
                 [:spacebar [:km "open: Reflect"]]
                 [:m :!Sm]
                 ]}
                 ;[:tab [:km "open: GitHub search (in Arc)"]]
                 ;[:left_command [:km "cursor: nikiv."]] ; + wiki, i. (?)
                 ;[:tab [:alfred "list_windows_of_active_app" "com.alfredapp.vitor.windowswitcher"]] ; TODO: rebind
                 ;[:escape [:km "switch between windows of same app (or switch to another app if no more than 1 window)"]] ; TODO: rebind
                 ;[:grave_accent_and_tilde [:km "open docs of current project"]] ; TODO: make work and bind
                 ;[:grave_accent_and_tilde :!Tspacebar] ; contexts window search (only cursor)
                 ;[:left_command [:km "open: Learn Anything"]]
                 ;[:tab [:km "open: Anybox"]]
                 ;[:spacebar [:km "open: Learn Anything"]]
                 ;[:tab [:km "better (selection)"]] ; TODO: move it to cursor
                 ;[:escape [:km "Cursor = Open sublime merge to commit current project | All = Homerow"]] ; TODO: bind smth nicer
                 ; TODO: have auto commit somewhere here with nice commits
                 ; TODO: LA capture, maybe map to f key. f+j or smth (universal)
                 ;[:grave_accent_and_tilde [:km "Cursor = commit all | All = clone open repo and open in Cursor"]] ; TODO: fix up
                 ;[:grave_accent_and_tilde [:km "cursor: do"]]
                 ;[:grave_accent_and_tilde [:!Sgrave_accent_and_tilde]] ; -> ~
                 ;[:spacebar :!SCspacebar] ; Homerow search
                 ;[:escape :!CTO4] ; Alfred file/text action
                 ;[:tab [:km "lisa: autocomplete"]] ; TODO: make lisa work
                 ;[:grave_accent_and_tilde :!Ospacebar] ; Switch language (Russian <-> English)
                 ;[:tab [:km "Smart Autocomplete & new line"]]
                 ;[:escape [:km "Smart Autocomplete"]]
                 ;[:tab [:km ""]]
                 ;[:escape [:km "get last error from ~/log/cmd.log + current file as context"]]
                 ;[:escape [:km "get last error from ~/log/cmd.log + current file as context and paste into claude to fix"]]
                 ;[:escape [:km "get last error from ~/log/cmd.log + current file as context and paste into chatgpt to fix"]]
        {:des "quotekey (gh workspaces)"
         :rules [:quote-mode
                 ]}
                 ;[:i [:km "cursor: tauri-gh"]]
                 ;[:o [:km "cursor: elysia."]]
                 ;[:p [:km "cursor: electron-gh"]]
                 ;[:f [:km "cursor: convex-gh"]]
                 ;[:t [:km "cursor: gitea-gh"]] ; rust git version can be used in wasm? for gitedit
                 ;[:u [:km "cursor: opentui-gh"]]
                 ;[:w [:km "cursor: nativewind-gh"]]
                 ;[:e [:km "cursor: reanimated-gh"]]
                 ;[:r [:km "cursor: nitro-gh"]]
                 ;[:t [:km "cursor: mistral-rs-gh"]]
                 ;[:u [:km "cursor: automerge-gh"]]
                 ;[:o [:km "cursor: loco-gh"]]
                 ;[:a [:km "cursor: openai-gh"]]
                 ;[:s [:km "cursor: unistyles-gh"]]
                 ;[:d [:km "cursor: deepseek-gh"]]
                 ;[:g [:km "cursor: gemini-gh"]]
                 ;[:k [:km "cursor: rn-mmkv-gh"]]
                 ;[:g [:km "cursor: tamagui-gh"]]
                 ;[:x [:km "cursor: mdx-gh"]]
                 ;[:c [:km "cursor: anthropic-gh"]]
                 ;[:v [:km "cursor: rn-vision-camera-gh"]]
                 ;[:b [:km "cursor: rn-bottom-sheet-gh"]]
                 ;[:m [:km "cursor: prisma-gh"]]
                 ;[:spacebar [:km "cursor: k23-gh"]]
        {:des "skey (essential)"
         :rules [:s-mode
                 [:w [:!Oleft_arrow :!OSright_arrow]] ; Highlight word
                 [:e :tab]
                 [:r :!Stab]
                 ;:t TODO: make it save a gist or smth useful
                 [:i [:km "Selected text -> Alfred Snippet"]]
                 [:o :!Cx] ; Cut
                 [:open_bracket [:km "Lowercase selected text"]]
                 [:close_bracket [:km "Uppercase selected text"]]
                 [:a :!Cc] ; Copy
                 [:d :delete_or_backspace]
                 [:f :return_or_enter]
                 ;[:g :!Ctab] ; for some reason breaking now, it does not disable the switch
                 ; TODO: quite annoying as return key goes through to apps now..
                 ;[:g [:!Ctab :return_or_enter]] ; so now forced to return key after..
                 [:g [:!Ctab :vk_none]]
                 ; TODO: there is delay with this but `[:g :!Ctab]` sadly started to stop working..
                 ;[:g [:km "active last app"]]
                 ; TODO: fix up
                 ;[:period [:km "Select word & move to Claude"]]
                 ;[:comma [:km "Select word & move to Claude (and run instantly)"]]
                 ;[:slash [:km "Select line & move to Claude"]]
                 [:##h :left_arrow]
                 [:##j :down_arrow]
                 [:##k :up_arrow]
                 [:##l :right_arrow]
                 [:semicolon :!Sreturn_or_enter]
                 [:quote [:!Cleft_arrow :!CSright_arrow]] ; Highlight current line
                 [:c :!Cdelete_or_backspace]
                 [:v :left_shift]
                 [:##b :!Cleft_arrow]
                 [:n :!Cv] ; Paste
                 [:##m :!Cright_arrow]
                 [:period [:km "Selected line -> Current TODO (with AI do)"]]
                 [:spacebar [:km "Selection -> Current TODO (with AI do)"]]
                 ]}
                 ;[:t :!OS1] ; ChatGPT selected text
                 ;[:semicolon [:km "Selected text to Claude"]]
                 ; TODO: keybind for AI rewrite on selected text (raycast like prompt? maybe raycast has somthing as AI action)
                 ;[:comma [:km "Show active todo"]]
                 ;[:i [:km "Select word & jump to next occurance"]]
                 ;[:i [:km "Select word & copy"]]
                 ;[:u :!COp] ; Selection -> HasteBin link
                 ;[:i :!CTperiod] ; Contexts search active windows ; TODO: maybe replace with alfred/raycast workflow to search active windows to jump to (similar to https://contexts.co)
                 ;[:i [:km "Selected text -> Alfred Snippet"]]
                 ;[:u :!COp] ; Selection -> HasteBin link
                 ;[:i :!COp] ; Selection -> private GitHub gist (with url in clipboard) TODO:
                 ;[:open_bracket :!Oleft_arrow]
                 ;[:semicolon [:km "Autocomplete"]] ; TODO:
                 ;[:semicolon [:km "New active todo"]] ; TODO: make LLM try to give hints on making this task, start processing it
                 ;[:semicolon [:km "Selected text -> Alfred Snippet"]]
                 ;[:##semicolon [:km "New active todo"]]
                 ;[:semicolon :!CTO0] ; Search Alfred Snippets
                 ;[:period :!COS0]]} ; TODO: bind to something nice
        {:des "swap : and ;"
        :rules [[:#Psemicolon :!Ssemicolon]
                 [:!Ssemicolon :semicolon]]}
        ; TODO: for some reason if you do it this way, caps lock doesn't always trigger.. makes it unuseable
        ; forced to use simple modification in karabiner GUI (caps_lock -> escape)
        ;{:des "caps (alone) -> escape"
         ;:rules [[:caps_lock ["caps-mode" 1] nil {:afterup ["caps-mode" 0] :alone :escape}]]}
        ;{:des "right cmd -> Alfred"
        ; :rules [[:right_command :right_command nil {:alone :!CTOSspacebar}]]}
        ;{:des "§ -> Karabiner on/off"
        ; :rules [[:non_us_backslash [:km "Karabiner on/off"]]]}
        {:des "sim"
         :rules [
                 [[:j :k] [:km "open Safari new tab"]]
                 [[:j :l] :!CTOSspacebar] ; Alfred
                 [[:k :l] :!COS9] ; Raycast
                 [[:j :semicolon] [:alfred "run" "iansinnott.keyboardmaestro"]]
                 [[:l :m] [:alfred "search clones and forks" "com.vitorgalvao.alfred.directories"]] ; TODO: improve. use my own ver.
                 [[:k :m] [:km "open YouTube search (in comet)"]]
                 ]}
                 ;[[:k :n] [:km "open: Dash (with search)"]]
                 ;[:m [:km "open: Safari Technology Preview"]]
                 ;[[:k :m] [:alfred "search youtube" "net.deanishe.alfred-searchio"]]
                 ;[[:j :k] [:alfred "search google" "net.deanishe.alfred-searchio"]] ; TODO: fix
                 ;[[:l :m] [:raycast "renfei_song/snippetslab/index"]] ; TODO: move to own tool + a way to preview snippets inline (move to better solution)
                 ;[[:j :semicolon] :!CSspacebar] ; Kunkun
                 ;[[:j :semicolon] [:alfred "run" "iansinnott.keyboardmaestro"]]
                 ;[[:l :n] :!TOSr] ; ScriptKit
                 ;[[:j :semicolon] :!CSspacebar] ; Homerow ; TODO: check if it's useful
                 ;[[:j :semicolon] [:km "Notion global search (in app)"]]
                 ;[[:j :semicolon] [:km "Cursor = Open sublime merge to commit current project | All = Homerow"]] ; TODO: think it better
                 ;[[:l :m] :!TOSt] ; Raycast AI quick chat
                 ;[[:k :n] :!TOSu] ; Raycast AI window
                 ;[[:j :semicolon] :!TOSw] ; Notion Command Search TODO: replace with LA global search (with same Notion like raycast window) (inline info!)
        ; TODO: mby use it to search docs of things fast (like raycast)
        {:des "backkey (gh workspaces)"
         :rules [:backslash-mode
                 ]}
                 ;[:q [:km "cursor: sqlite-gh"]]
                 ;[:w [:km "cursor: swc-gh"]]
                 ;[:e [:km "cursor: dagger-gh"]]
                 ;[:r [:km "cursor: dagster-gh"]]
                 ;[:t [:km "cursor: pothos-gh"]]
                 ;[:y [:km "cursor: kysely-gh"]]
                 ;[:t [:km "cursor: postgres-gh"]]
                 ;[:u [:km "cursor: duckdb-gh"]]
                 ;[:i [:km "cursor: cloudflare-gh"]]
                 ;[:o [:km "cursor: redwood-gh"]]
                 ;[:p [:km "cursor: fastapi-gh"]]
                 ;[:d [:km "cursor: docker-gh"]]
                 ;[:f [:km "cursor: graft-gh"]]
                 ;[:g [:km "cursor: gluestack-gh"]]
                 ;[:h [:km "cursor: charm-gh"]]
                 ;[:j [:km "cursor: baseui-gh"]]
                 ;[:k [:km "cursor: shadcn-gh"]]
                 ;[:l [:km "cursor: react-spectrum-gh"]]
                 ;[:b [:km "cursor: limbo-gh"]]
                 ;[:n [:km "cursor: deno-gh"]]
                 ;[:m [:km "cursor: drizzle-gh"]]
                 ;[:semicolon [:km "cursor: wails-gh"]]
                 ;[:comma [:km "cursor: node-gh"]]
                 ;[:period [:km "cursor: task-gh"]]
        {:des "1key (gh workspaces)"
         :rules [:1-mode
                 [:i [:km "cursor: tvix-gh"]] ; TODO: & vincent's go nix implementation
                 [:o [:km "cursor: codanna-gh"]]
                 [:j [:km "cursor: jsr-gh"]]
                 [:k [:km "cursor: dspy-gh"]]
                 [:l [:km "cursor: flox-gh"]]
                 [:semicolon [:km "cursor: ghostty-gh"]]
                 [:b [:km "cursor: supabase-gh"]]
                 [:n [:km "cursor: pydantic-ai-gh"]]
                 [:m [:km "cursor: connar-gh"]]
                 [:period [:km "cursor: deno-gh"]]
                 [:slash [:km "cursor: yaak-gh"]]
                 ;[:e [:km "cursor: gorealeaser-gh"]]
                 ;[:i [:km "cursor: nixpkgs-gh"]]
                 ;[:f [:km "cursor: mbt-gh"]]
                 ;[:g [:km "cursor: gensx-gh"]]
                 ;[:j [:km "cursor: deno-std-gh"]]
                 ;[:l [:km "cursor: gel-gh"]]
                 ;[:quote [:km "cursor: meilisearch-gh"]]
                 ;[:v [:km "cursor: n8n-gh"]]
                 ;[:n [:km "cursor: inngest-gh"]]
                 ;[:m [:km "cursor: victoria-metrics-gh"]]
                 ;[:comma [:km "cursor: unison-gh"]]
                 ;[:period [:km "cursor: go-gh"]]
                 ;[:spacebar [:km "cursor: swift-gh"]]
                 ;[:e [:km "cursor: r-gh"]]
                 ;[:1 [:km "cursor: r-gh"]]
                 ;[:2 [:km "cursor: l-gh"]]
                 ;[:3 [:km "cursor: campsite-gh"]]
                 ;[:4 [:km "cursor: t-gh"]]
                 ;[:w [:km "cursor: railway-gh"]]
                 ;[:e [:km "cursor: telegram-sdk-gh"]]
                 ;[:r [:km "cursor: opral-gh"]]
                 ;[:t [:km "cursor: tuist-gh"]]
                 ;[:u [:km "cursor: atuin-gh"]]
                 ;[:i [:km "cursor: mail-0-gh"]]
                 ;[:escape [:km "cursor: posthog-gh"]]
                 ;[:a [:km "cursor: tca-gh"]]
                 ;[:s [:km "cursor: sentry-gh"]]
                 ;[:f [:km "cursor: fly-gh"]]
                 ;[:g [:km "cursor: gel-gh"]]
                 ;[:h [:km "cursor: anchor-gh"]]
                 ;[:j [:km "cursor: anime-gh"]]
                 ;[:k [:km "cursor: leader-key-gh"]]
                 ;[:z [:km "cursor: zed-gh"]]
                 ;[:x [:km "cursor: extism-gh"]]
                 ;[:c [:km "cursor: connnect-gh"]]
                 ;[:v [:km "cursor: void-gh"]]
                 ;[:b [:km "cursor: webkit-gh"]]
                 ;[:n [:km "cursor: scira-mcp-chat-gh"]]
                 ;[:m [:km "cursor: legend-list-gh"]]
                 ;[:period [:km "cursor: legend-state-gh"]]
                 ;[:spacebar [:km "cursor: mlx-eco-gh"]] ; mlx-vlm, mlx-audio, mlx-embeddings, mlx-lm
                 ]}
                 ;[:q [:km "cursor: tiptap-gh"]]
                 ;[:n [:km "cursor: panda-gh"]] ; includes ark
                 ;[:n [:km "cursor: livestore-gh"]]
                 ;[:left_command [:km "cursor: mojo-gh"]]
                 ;[:f [:km "cursor: chef."]]
                 ;[:t [:km "cursor: better-auth-gh"]]
                 ;[:comma [:km "cursor: kotlin-gh"]]
                 ;[:s [:km "cursor: solana-gh"]]
                 ;[:g [:km "cursor: zig-gh"]]
                 ;[:comma [:km "cursor: unison-gh"]]
                 ;[:4 [:km "cursor: hono."]] ; + openapi gen
                 ;[:semicolon [:km "cursor: qdrant-gh"]]
                ;;  [:w [:km "cursor: serwist-gh"]]
                ;;  [:escape [:km "cursor: tailwind-gh"]]
                ;;  [:d [:km "cursor: dicedb-gh"]]
                ;;  [:g [:km "cursor: telegram-gh"]]
                ;;  [:l [:km "cursor: electron-gh"]]
                ;;  [:b [:km "cursor: bolt-gh"]]
                 ;[:e [:km "cursor: rsbuild-gh"]]
                 ;[:r [:km "cursor: rspack-gh"]]
                 ;[:t [:km "cursor: eslint-gh"]]
                 ;[:u [:km "cursor: cutlass-gh"]]
                 ;[:y [:km "cursor: voby-gh"]]
                 ;[:i [:km "cursor: react-scan-gh"]]
                 ;[:o [:km "cursor: midscene-gh"]]
                 ;[:f [:km "cursor: urvafe-cli-gh"]]
                 ;[:c [:km "cursor: farcaster-gh"]]
                 ;[:b [:km "cursor: cobra-gh"]]
                 ;[:m [:km "cursor: million-gh"]]
                 ;[:comma [:km "cursor: a2a-gh"]] ; with github.com/google/adk-python
                 ;[:period [:km "cursor: agents-gh"]]
                 ;[:spacebar [:km "cursor: tailscale-gh"]]
                 ;[:p [:km "cursor: fastapi-gh"]]
                 ;[:c [:km "cursor: langchain-gh"]]
                 ;[:w [:km "cursor: railway-gh"]]
                 ;[:e [:km "cursor: smolagents-gh"]]
                 ;[:open_bracket [:km "cursor: orama-gh"]]
                 ;[:left_command [:km "cursor: charm-gh"]]
                 ;[:t [:km "cursor: nextjs-gh"]]
                 ;[:v [:km "cursor: garden-gh"]]
                 ; TODO: make spacekey search through gh workspaces mby or another bind
                 ;[:slash [:km "cursor: odin-gh"]]
                 ;[:k [:km "cursor: kotlin."]]
                 ;[:l [:km "cursor: lean."]]
                 ;[:period [:km "cursor: ruby."]]
                 ;[:quote [:km "wiki: Summary"]]
                 ;[:n [:km "proj: Dotfiles"]]
                 ;[:m [:km "proj: Home"]]
                 ;[:comma [:km "edit: Now"]]
                 ;[:semicolon [:km "proj: Wiki"]]
                 ;[:j [:km "edit: Fish aliases"]]
                 ;[:r [:km "proj: LA"]]
                 ;[:i [:km "edit: Likes"]]
                 ;[:o [:km "edit: Projects"]]
                 ;[:t [:km "edit: Git config"]]
                 ;[:g [:km "edit: gitignore global"]]
                 ;[:h [:km "wiki: Used hotkeys"]]
                 ;[:l [:km "Search current safari url in wiki"]]
                 ;[:o [:alfred "soulver" "app.soulver.alfredworkflow"]]
                 ;[:equal_sign [:km "cursor: solid."]]
                 ;[:m [:km "cursor: ml-gh"]] ; jax/pytorch/tinygrad/mojo-max..
                 ;[:y [:km "cursor: happy-dom-gh"]]
                 ;[:u [:km "cursor: turbo-gh"]]
                 ;[:i [:km "cursor: trieve-gh"]]
                 ;[:f [:km "cursor: lefthook-gh"]]
                 ;[:g [:km "cursor: playwright-gh"]]
                 ;[:k [:km "cursor: tanstack-gh"]]
                 ;[:l [:km "cursor: alchemy-gh"]]
                 ;[:semicolon [:km "cursor: ai-gh"]]
                 ;[:c [:km "cursor: msgpackr-gh"]]
                 ;[:n [:km "cursor: lm-studio-gh"]]
                 ;[:m [:km "cursor: ollama-gh"]]
                 ;[:comma [:km "cursor: neverthrow-gh"]]
                 ;[:period [:km "cursor: agno-gh"]]
                 ;[:e [:km "cursor: react-native-gh"]]
                 ;[:t [:km "cursor: vitest-gh"]]
                 ;[:y [:km "cursor: typedoc-gh"]]
                 ;[:u [:km "cursor: rusqlite-gh"]]
                 ;[:i [:km "cursor: diffusers-gh"]]
                 ;[:o [:km "cursor: transformers-gh"]]
                 ;[:p [:km "cursor: peft-gh"]]
                 ;[:open_bracket [:km "cursor: pkg-pr-new-gh"]]
                 ;[:d [:km "cursor: datasets-gh"]]
                 ;[:k [:km "cursor: langchain-gh"]]
                 ;[:l [:km "cursor: smolagents-gh"]]
                 ;[:m [:km "cursor: mcp-spec-gh"]]
                 ;[:comma [:km "cursor: skip-gh"]]
                 ;[:o [:alfred "soulver" "app.soulver.alfredworkflow"]]
        {:des "2key (move, workspaces)"
         :rules [:2-mode
                 [:3 [:km "cursor: optique-gh"]] ; https://github.com/dahlia/optique
                 [:e [:km "cursor: rn-gh"]]
                 [:r [:km "cursor: react-gh"]]
                 [:i [:km "cursor: arktype-gh"]]
                 [:o [:km "cursor: zod-gh"]]
                 [:h :!Cleft_arrow]
                 [:j :!Cdown_arrow]
                 [:k :!Cup_arrow]
                 [:l :!Cright_arrow]
                 [:semicolon :!Oup_arrow]
                 [:quote :!Odown_arrow]
                 [:n [:km "cursor: pulumi-gh"]]
                 [:m [:km "cursor: reatom."]]
                 [:period [:km "cursor: pytorch-gh"]]
                 [:slash [:km "cursor: tinygrad-gh"]]
                 [:spacebar [:km "cursor: mlx-gh"]]
                 ]}
        {:des "3key (gh workspaces)"
         :rules [:3-mode
                 [:e [:km "cursor: biome-gh"]]
                 [:r [:km "cursor: restate-gh"]]
                 [:t [:km "cursor: temporal-gh"]]
                 [:u [:km "cursor: unsloth-gh"]]
                 [:i [:km "cursor: opencode-gh"]]
                 [:o [:km "cursor: agno-gh"]]
                 [:p [:km "cursor: polar-gh"]]
                 [:d [:km "cursor: tailwind-gh"]]
                 [:h [:km "cursor: hono."]]
                 [:j [:km "cursor: ai-sdk-gh"]]
                 [:k [:km "cursor: ax-gh"]]
                 [:l [:km "cursor: codex-gh"]]
                 [:semicolon [:km "cursor: mastra-gh"]]
                 [:b [:km "cursor: bluesky-gh"]]
                 [:n [:km "cursor: bun-gh"]]
                 [:m [:km "cursor: alchemy-gh"]]
                 [:period [:km "cursor: jazz-gh"]]
                 [:slash [:km "cursor: trigger-gh"]]
                 [:spacebar [:km "cursor: jax-gh"]]
                 ]}
        {:des "4key (swapping languages for now)"
         :rules [:4-mode
                 ; TODO: should be automatic based of file extension
                 [:j [[:open-g "dash-plugin://query=.tsprofile%3A&prevent_activation=true"] ["in-ts" 1] ["in-rust" 0] ["in-swift" 0] ["in-go" 0] ["in-python" 0]]] ; TS
                 [:semicolon [[:open "dash-plugin://query=.swiftprofile%3A&prevent_activation=true"] ["in-ts" 0] ["in-rust" 0] ["in-swift" 1] ["in-go" 0] ["in-python" 0]]] ; Swift
                 [:n [[:open "dash-plugin://query=.pyprofile%3A&prevent_activation=true"] ["in-python" 1] ["in-go" 0] ["in-ts" 0] ["in-elixir" 0] ["in-rust" 0] ["in-swift" 0]]] ; Python
                 [:m [[:open "dash-plugin://query=.goprofile%3A&prevent_activation=true"] ["in-ts" 0] ["in-rust" 0] ["in-swift" 0] ["in-go" 1] ["in-python" 0]]] ; Go
                 [:period [[:open-g "dash-plugin://query=.rustprofile%3A&prevent_activation=true"] ["in-ts" 0] ["in-rust" 1] ["in-swift" 0] ["in-go" 0] ["in-python" 0]]] ; Rust
                 ]}
                 ;[:spacebar [:km "cursor: opencode-gh"]]
                 ;[:k [:km "cursor: console-gh"]]
                 ;[:l [:km "cursor: genql-gh"]]
                 ;[:b [:km "cursor: fbtree-gh"]]
                 ;[:t [:km "cursor: terminal-gh"]]
                 ;[:u [:km "cursor: openauth-gh"]]
                 ;[:i [:km "cursor: coolify-gh"]]
                 ;[:o [:km "cursor: grafbase-gh"]]
                 ;[:p [:km "cursor: pnpm-gh"]]
                 ;[:open_bracket [:km "cursor: graphql-yoga-gh"]]
                 ;[:a [:km "cursor: opencontrol-gh"]]
                 ;[:f [:km "cursor: opentofu-gh"]]
                 ;[:r [:km "edit: Web Searches"]]
                 ;[:t [:km "list: Newsletters"]]
                 ;[:o [:km "list: Blogs"]]
                 ;[:p [:km "list: Podcasts"]]
                 ;[:k [:km "list: Alfred workflows"]]
                 ;[:l [:km "list: Command line tools"]]
                 ;[:n [:km "list: Events"]]
        {:des "5key (gh workspaces)"
         :rules [:5-mode
                 [:t [:km "cursor: entropix-gh"]]
                 [:y [:km "cursor: yek-gh"]]
                 [:u [:km "cursor: cuda-gh"]]
                 [:i [:km "cursor: figma-gh"]]
                 [:o [:km "cursor: tensorrt-llm-gh"]]
                 [:semicolon [:km "cursor: aistore-gh"]]
                 [:k [:km "cursor: kraken-gh"]]
                 [:l [:km "cursor: causalml-gh"]]
                 [:b [:km "cursor: baseweb-gh"]]
                 [:n [:km "cursor: notion-gh"]]
                 [:m [:km "cursor: youtube-music-gh"]]
                 [:period [:km "cursor: yt-dlp-gh"]]
                 [:spacebar [:km "cursor: jax-eco-gh"]] ; https://github.com/NVIDIA/JAX-Toolbox, ..
                 ]}
        {:des "7key (gh workspaces)"
         :rules [:7-mode
                 [:r [:km "cursor: brush-gh"]]
                 [:f [:km "cursor: folo-rs-gh"]]
                 [:c [:km "cursor: calloop-rs-gh"]]
                 [:spacebar [:km "cursor: model2vec-rs-gh"]]
                 ]}
        {:des "8key (gh workspaces)"
         :rules [:8-mode
                 [:q [:km "cursor: quic-go-gh"]]
                 [:e [:km "cursor: elevenlabs-gh"]]
                 [:r [:km "cursor: rig-gh"]]
                 [:s [:km "cursor: goose-gh"]]
                 [:g [:km "cursor: g3-gh"]]
                 [:k [:km "cursor: anki-gh"]]
                 [:c [:km "cursor: quiche-gh"]]
                 [:spacebar [:km "cursor: fumadocs-gh"]]
                 ]}
        {:des "9key (gh workspaces)"
         :rules [:9-mode
                 [:w [:km "cursor: vscode-vim-gh"]]
                 [:t [:km "cursor: typst-gh"]]
                 [:e [:km "cursor: neovim-gh"]]
                 [:u [:km "cursor: cuml-gh"]]
                 [:s [:km "cursor: scipy-gh"]]
                 [:d [:km "cursor: pandas-gh"]]
                 [:f [:km "cursor: snafu-gh"]]
                 [:v [:km "cursor: v8-gh"]]
                 [:spacebar [:km "cursor: keel-gh"]]
                 ]}
        {:des "0key (gh workspaces)"
         :rules [:0-mode
                 [:e [:km "cursor: vue-gh"]]
                 [:r [:km "cursor: orpc-gh"]]
                 [:t [:km "cursor: trpc-gh"]]
                 [:i [:km "cursor: radix-gh"]]
                 [:a [:km "cursor: hanko-gh"]]
                 [:s [:km "cursor: resend-gh"]]
                 [:h [:km "cursor: hookas-gh"]]
                 [:j [:km "cursor: manypkg-gh"]]
                 [:x [:km "cursor: nuxt-gh"]]
                 [:c [:km "cursor: lichess-gh"]]
                 [:v [:km "cursor: avelin-gh"]]
                 [:b [:km "cursor: microbus-gh"]]
                 [:m [:km "cursor: modern-js-gh"]]
                 [:spacebar [:km "cursor: convex-gh"]]
                 ]}
        {:des "hyphenkey (gh workspaces)"
         :rules [:hyphen-mode
                 [:e [:km "cursor: phoenix-gh"]]
                 [:r [:km "cursor: elixir-gh"]]
                 [:t [:km "cursor: upstash-gh"]]
                 [:a [:km "cursor: astro-gh"]]
                 [:s [:km "cursor: scalar-gh"]]
                 [:d [:km "cursor: caddy-gh"]]
                 [:f [:km "cursor: traefik-gh"]]
                 [:g [:km "cursor: godot-gh"]]
                 [:b [:km "cursor: ladybird-gh"]]
                 [:x [:km "cursor: xata-gh"]]
                 [:spacebar [:km "cursor: morphic-gh"]]
                 ]}
        {:des "equalSignKey (gh workspaces)"
         :rules [:hyphen-mode
                 [:q [:km "cursor: sqlight-gh"]]
                 [:w [:km "cursor: swift-async-algorithms-gh"]]
                 [:e [:km "cursor: lean-gh"]] ; with https://github.com/GasStationManager/LeanTool
                 [:t [:km "cursor: yugabyte-db-gh"]]
                 [:s [:km "cursor: bolt-ts-gh"]]
                 [:f [:km "cursor: fets-gh"]]
                 [:g [:km "cursor: gptqmodel-gh"]]
                 [:c [:km "cursor: curlie-gh"]]
                 [:t [:km "cursor: streamlit-gh"]] ; with https://github.com/whitphx/stlite
                 [:b [:km "cursor: browser-bee-gh"]]
                 [:spacebar [:km "cursor: n8n-gh"]]
                 ]}
        {:des "tabkey (gh workspaces)"
         :rules [:tab-mode
                 [:w [:km "cursor: swift-gh"]]
                 [:e [:km "cursor: go-gh"]]
                 [:r [:km "cursor: raycast-gh"]]
                 [:h [:km "cursor: helix-db-gh"]]
                 [:j [:km "cursor: ts-gh"]]
                 [:k [:km "cursor: fumadocs-gh"]]
                 [:l [:km "cursor: tiptap-gh"]]
                 [:semicolon [:km "cursor: vscode-gh"]]
                 [:b [:km "cursor: grafbase-gh"]]
                 [:o [:km "cursor: motion-gh"]]
                 [:m [:km "cursor: midday-gh"]]
                 [:left_command [:km "cursor: rust-gh"]]
                 [:spacebar [:km "cursor: py-gh"]]
                 ]}
                 ;[:period [:km "cursor: swift-gh"]]
                 ;[:slash [:km "cursor: mbt-gh"]]
                 ;[:m [:km "cursor: mlx-gh"]]
                 ;[:quote [:km "cursor: gleam-gh"]]
                 ;[:c [:km "cursor: nix-gh"]]
                 ;[:semicolon [:km "cursor: jazz-gh"]]
                 ;[:semicolon [:km "cursor: jazz-gh"]]
                 ;[:s [:km "cursor: hono."]]
                 ;[:i [:km "cursor: gitea-gh"]]
                 ;[:k [:km "cursor: ai-sdk-gh"]]
                 ;[:f [:km "Get time in SF"]]
                 ;[:d [:km "Open Dash and search docsets"]]
                 ;[:hyphen [:km "cursor: vscode."]]
                 ;[:equal_sign [:km "cursor: bluesky."]]
                 ;[:3 [:km "Add/remove explore to focus workspace"]]
                 ; TODO: should be automated, i should never run these myself
                 ;[:f [:km "Get time in SF"]]
        {:des "qkey (cmd + shift)"
         :rules [:q-mode
                 [:3 :!CS3]
                 [:4 :!CS4]
                 [:5 :!CS5]
                 [:6 :!CS6]
                 [:7 :!CS7]
                 [:8 :!CS8]
                 [:9 :!CS9]
                 [:0 :!CS0]
                 [:w :!CSw]
                 [:e :!CSe]
                 [:r :!CSr]
                 [:t :!CSt]
                 [:y :!CSy]
                 [:u :!CSu]
                 [:i :!CSi]
                 [:o :!CSo]
                 [:p :!CSp]
                 [:open_bracket :!CSopen_bracket]
                 [:close_bracket :!CSclose_bracket]
                 [:a :!CSa]
                 [:s :!CSs]
                 [:d :!CSd]
                 [:f :!CSf]
                 [:g :!CSg]
                 [:h :!CSh]
                 [:j :!CSj]
                 [:k :!CSk]
                 [:l :!CSl]
                 [:semicolon :!CSsemicolon]
                 [:quote :!CSquote]
                 [:z :!CSz]
                 [:x :!CSx]
                 [:c :!CSc]
                 [:v :!CSv]
                 [:b :!CSb]
                 [:n :!CSn]
                 [:m :!CSm]
                 [:comma :!CScomma]
                 [:period :!CSperiod]
                 [:slash :!CSslash]
                 [:spacebar :!CSOe]
                 ]} ; Selection -> YouTube
                 ;[:spacebar [:km "Explain selected text with ChatGPT or explain .."]]]} ; TODO: make it use my own tool, similar to https://superwhisper.com record window, select text, then stream explain selected text in window
                 ;[:spacebar [:km "Selected text into Google Lucky search"]]]}
                 ;[:spacebar [:km "Explain selected text"]]]} ; TODO: seems not needed, as there is e+spacebar
        {:des "wkey (apps)"
         :rules [:w-mode
                 [:q [:km "open: SnippetsLab"]]
                 [:e [:km "open: Linear"]]
                 [:r [:km "open: 1Password"]]
                 [:t [:km "open: Attio"]]
                 [:i [:km "open: VSCode Insiders"]]
                 [:o [:km "open: Keyboard Maestro"]]
                 [:p [:km "open: Proxyman"]]
                 [:grave_accent_and_tilde [:km "open: Color Picker"]]
                 [:escape [:km "open: Finder"]]
                 [:a [:km "open: Repo Prompt"]]
                 [:d [:km "open: Fantastical"]]
                 [:f [:km "open: Things"]] ; TODO: LA todos (separate app ideally) (show today calendar on right, same quality as Fantastical/Amie) (on left 2Do/Things/Linear/Ship like!)
                 [:g [:km "open: JuxtaCode"]] ; TODO: replace with gitedit (better)
                 [:h [:km "open: Yaak"]]
                 [:j [:km "open: Ghostty"]]
                 [:k [:km "open: Safari"]]
                 [:l [:km "open: Cursor"]]
                 [:semicolon [:km "open: Xcode Beta"]]
                 [:quote [:km "open: n8n"]]
                 [:c [:km "open: Spotify"]]
                 [:v [:km "open: Reader"]]
                 [:b [:km "open: Remnote"]]
                 [:n [:km "open: Notion"]]
                 [:m [:km "open: Modal Notebooks"]]
                 [:period [:km "open: Sublime Merge"]]
                 [:slash [:km "open: Safari Technology Preview"]]
                 ;[:left_command [:km "open: Warp"]]
                 [:left_command [:km "open: TablePlus"]]
                 [:spacebar [:km "open: SQLiteFlow"]]
                 ]}
                 ;[:n [:km "open: Conar"]] ; replace with own tool (friendik?)
                 ;[:left_command [:km "open: Remnote"]]
                 ;[:left_command [:km "open: Reader"]]
                 ;[:slash [:km "open: GitButler"]]
                 ;[:b [:km "open: Colab"]]
                 ;[:v [:km "open: VSCode Insiders"]]
                 ;[:quote [:km "open: Bike"]]
                 ;[:g [:km "open: Obsidian"]]
                 ;[:left_command [:km "open: Conductor"]]
                 ;[:left_command [:km "open: Notion"]]
                 ;[:slash [:km "open: PyCharm"]]
                 ;[:quote [:km "open: Simulator"]]
                 ;[:slash [:km "open: Instruments"]]
                 ;[:t [:km "open: Craft"]]
                 ; TODO: add somewhere
                 ;[:comma [:km "open: Replit"]] ; TODO: bind nicer
                 ;[:b [:km "open: IntelliJ IDEA"]]
                 ;[:i [:km "open: Zen Browser"]]
                 ;[:d [:km "open: dbx"]] ; TODO: bind key #now
                 ;[:a [:km "open: Learn Anything"]] ; TODO: for now web, later map to desktop app
                 ;[:b [:km "open: BetterTouchTool"]]
                 ;[:t [:km "open: Passwords"]]
                 ;[:d [:km "open: SolBond"]]
                 ;[:g [:km "open: genx"]]
                 ;[:t [:km "open: JuxtaText"]]
                 ;[:g [:km "open: Pathfinder"]]
                 ;[:semicolon [:km "open: Xcode Beta (but not xcode test project)"]]
                 ;[:n [:km "Open Xcode personal"]]
                 ;[:n :!OC9] ; open 2nd mac space with Xcode + Terminal
                 ;[:d [:km "open: Anytype"]]
                 ;[:semicolon [:km "open: Xcode"]]
                 ;[:l [:km "open: Cursor main window"]]
                 ;[:semicolon [:km "open: Cursor (but not main window)"]]
                 ;[:d [:km "open: System Settings"]]
                 ;[:i [:km "open: Hoppscotch"]]
                 ;[:period [:km "open: Bruno"]]
                 ;[:period [:km "open: Xcode"]]
                 ;[:period [:km "open: Xcode (beta)"]]
                 ;[:n [:km "open: Learn Anything (prefer dev)"]]
                 ;[:t [:km "open: Pitch"]]
                 ;[:t [:km "open: 2Do"]]
                 ;[:v [:km "open: Obsidian"]] ; LA (everything but todos/calendar)
                 ;[:a [:km "open: Obsidian (first tab focus)"]]
                 ;[:r [:km "open: Spacedrive"]]
                 ;[:t [:km "open: Activity Monitor"]]
                 ;[:i [:km "open: Dropcode"]]
                 ;[:i [:km "open: OBS"]]
                 ;[:i [:km "open: Learn Anything"]]
                 ;[:u [:km "open: Bruno"]]
                 ;[:i [:km "open: Hoppscotch"]]
                 ;[:period [:km "open: Zed"]]
                 ;[:p [:km "open wip.md with Cursor Nightly"]]
                 ;[:r [:km "open: Things"]]
                 ;[:g [:km "open: Keynote"]]
                 ;[:d [:km "open: Day One"]]
                 ;[:g [:km "Journal"]] ; TODO: complete to use LA
                 ;[:f [:km "open: Learn Anything"]]
                 ;[:d [:km "open: Postico"]]
                 ;[:d [:km "open: Beekeepr Studio Ultimate"]]
                 ;[:g [:km "open: KusKus"]]
                 ;[:g [:km "open: Height"]]
                 ;[:h [:km "open: Things"]]
                 ;[:semicolon [:km "open: Cursor"]]
                 ;[:quote [:km "Open src.code-workspace and learn-anything.code-workspace"]]
                 ;[:quote [:km "Open learn-anything.code-workspace"]]
                 ;[:v [:km "open: TablePlus"]]
                 ;[:v [:km "open: RapidAPI"]]
                 ;[:spacebar [:km "open: TablePlus"]]]}
                 ;[:spacebar [:km "open: Dash"]]]}
                 ;[:spacebar [:km "open: Beekeepr Studio Ultimate"]]]}
                 ;[:period [:km "open: Commander One"]]
                 ;[:spacebar :!CT7]]} ; Start Google search with selection
                 ;[:spacebar [:km "open: Learn Anything"]]]}
                 ;[:spacebar [:km "Explain with ChatGPT"]]]}
                 ;[:spacebar [:km "open: Zen"]]]}
                 ;[:spacebar [:km "Explain with Ask"]]]}
        {:des "ekey (cmd)"
         :rules [:e-mode
                 [:q :!Cq]
                 [:w :!Cw]
                 [:r :!Cr]
                 [:t :!Ct]
                 [:u :!Cu]
                 [:i :!Ci]
                 [:p :!Cp]
                 [:open_bracket :!Copen_bracket]
                 [:close_bracket :!Cclose_bracket]
                 [:semicolon :!Csemicolon]
                 [:quote :!Cquote]
                 [:comma :!Ccomma]
                 [:period :!Cperiod]
                 [:slash :!Cslash]
                 [:a :!Ca]
                 [:b :!Cb]
                 [:c :!Cc]
                 [:d :!Cd]
                 [:f :!Cf]
                 [:g :!Cg]
                 [:h :!Ch]
                 [:j :!Cj]
                 [:k :!Ck]
                 [:l :!Cl]
                 [:m :!Cm]
                 [:n :!Cn]
                 [:o :!Co]
                 [:s :!Cs]
                 [:v :!Cv]
                 [:x :!Cx]
                 [:y :!Cy]
                 [:z :!Cz]
                 [:1 :!C1]
                 [:2 :!C2]
                 [:3 :!C3]
                 [:4 :!C4]
                 [:5 :!C5]
                 [:6 :!C6]
                 [:7 :!C7]
                 [:8 :!C8]
                 [:9 :!C9]
                 [:0 :!C0]
                 [:spacebar :!CT7] ; google search selected text
                 ]}
                 ;[:spacebar :!COequal_sign] ; 1Focus. TODO: get it working
                 ;[:spacebar :!TO2] ; TODO: 1Focus explain selected text (if text is selected, otherwise do area selection)
                 ;[:spacebar [:km "Selected text to Claude (run instantly)"]] ; TODO: move to something else (separate window, 0 context to explain things fast, overlay window ideally) (bind that to 1focus explain)
                ;[:spacebar :!CSO7]]} ; Selection -> Google Lucky TODO: no work..
                ;[:spacebar [:km "Explain selected text (or open ChatGPT Explain)"]]]}
                ;[:spacebar [:km "Explain selected text (or explain selected image)"]]]}
        {:des "rkey (apps)"
         :rules [:r-mode
                 [:tab [:km "open: Transmission"]]
                 [:q [:km "open: System Settings: Network"]]
                 [:w [:km "open: IINA"]]
                 [:e [:km "open: System Settings"]]
                 [:t [:km "open: Feedback Assistant"]]
                 [:i [:km "open: YouTube Music"]]
                 [:o [:km "open: Notes"]]
                 [:escape [:km "open: Final Cut Pro"]]
                 [:a [:km "open: Alfred Preferences"]]
                 [:b [:km "Edit keyboard shortcuts"]]
                 [:k [:km "open: Dictionary"]]
                 [:l [:km "open: Obsidian"]]
                 [:semicolon [:km "open: OrbStack"]]
                 [:b [:km "open: Books"]]
                 [:n [:km "open: Preview"]]
                 ;[:m [:km "open: Voice Memos"]]
                 [:period [:km "open: Docker Desktop"]]
                 [:slash [:km "open: Developer"]]
                 [:spacebar [:km "open: OBS"]]
                 ]}
                 ;[:k [:km "open: Reader"]]
                 ;[:i [:km "open: Obsidian"]]
                 ;[:slash [:km "open: WebStorm"]]
                 ;[:j [:km "open: Preview"]]
                 ;[:i [:km "open: PDF Expert"]]
                 ;[:m [:km "open: MacUpdater"]]
                 ;[:j [:km "open: Preview"]]
                 ;[:l [:km "Open Reader with Nightly TS- workspace split 50/50"]]
                 ;[:comma [:km "open: Arq"]]
                 ;[:semicolon [:km "open: Day One"]]
                 ;[:semicolon [:km "open: Crouton"]]
                 ;[:l [:km "open: Reeder"]]
                 ;[:n [:km "open: ScreenFlow"]]
                 ;[:m [:km "open: Music"]]
                 ;[:spacebar :!COSx]]} ; Selection -> Reddit
                 ;[:e [:km "open: Keynote"]]
                 ;[:i [:km "open: Flume"]]
                 ;[:i [:km "open: NetNewsWire"]]
                 ;[:escape [:km "open: Preview"]]
                 ;[:spacebar [:km "Copied image into ChatGPT"]]]}
        {:des "tkey (sites)"
         :rules [:t-mode
                 ; TODO: needs heavy update
                 [:9 [:alfred "search hn" "com.vitorgalvao.alfred.hackerboard"]]
                 [:0 [:km "w: HN (show new)"]]
                 [:q [:km "w: KM forum"]]
                 [:w [:km "w: Swift forum"]]
                 [:e [:km "w: Behance"]]
                 [:n [:km "w: genx"]]
                 [:r [:km "w: Medium (network)"]]
                 [:u [:km "w: Product Hunt"]]
                 [:i [:km "w: Dribble"]]
                 [:o [:km "w: Pinboard"]]
                 [:p [:km "w: Indie Hackers"]]
                 [:open_bracket [:km "w: Reddit Saved"]]
                 [:close_bracket [:km "w: Twitter Bookmarks"]]
                 [:a [:km "w: HN"]]
                 [:f [:km "w: Reddit (all)"]]
                 [:g [:km "w: Alfred Forum"]]
                 [:h [:km "w: HckrNews"]]
                 [:j [:km "w: HN (new)"]]
                 [:k [:km "w: GitHub (dashboard)"]]
                 [:l [:km "w: Lobsters (new)"]]
                 [:semicolon [:km "w: Reddit"]]
                 [:quote [:km "w: YouTube"]]
                 [:m [:km "open: Elk"]]
                 [:comma [:km "w: GitHub (trending)"]]
                 [:period [:km "Get break"]]
                 [:slash [:km "w: GitHub (explore)"]]
                 [:spacebar :!TOSs] ; Selection -> DuckDuckGo
                 ]}
                 ;[:j [:km "cursor: ~/i/ts/scripts/i.ts"]] TODO: not sure whats that about
                 ;[:h [:km "w: Product Hunt (new)"]]
                 ;[:j [:km "w: Reddit (new)"]]
                 ;[:j [:km "w: Reddit (in Safari Tech Preview)"]]
                 ;[:k [:km "w: GitHub (front page)"]]
                 ;[:l [:km "w: Lobsters"]]
                 ;[:z [:km "w: HN (comments)"]]
                 ;[:x [:km "w: Lobsters (comments)"]]
                 ;[:n [:km "w: Inoreader"]]
                 ;[:m [:km "w: Mastodon"]]
                 ;[:period [:km "w: YouTube (subs)"]]
                 ;[:t [:km "w: Medium (bookmarks)"]]
                 ;[:w [:km "cursor: langflow-gh"]]
                 ;[:e [:km "cursor: pavex-gh"]]
                 ;[:u [:km "cursor: unreal-gh"]]
                 ;[:i [:km "cursor: firecrawl-gh"]]
                 ;[:y [:km "cursor: code-payments-gh"]]
                 ;[:o [:km "cursor: outlines-gh"]]
                 ;[:p [:km "cursor: makepad-gh"]]
                 ;[:open_bracket [:km "cursor: partykit-gh"]]
                 ;[:escape [:km "cursor: sui-gh"]]
                 ;[:a [:km "cursor: lance-gh"]]
                 ;[:s [:km "cursor: helius-gh"]]
                 ;[:g [:km "cursor: gleam-gh"]]
                 ;[:h [:km "cursor: threejs-gh"]]
                 ;[:j [:km "cursor: next-gh"]]
                 ;[:k [:km "cursor: cline-gh"]]
                 ;[:l [:km "cursor: comfy-gh"]]
                 ;[:semicolon [:km "cursor: inngest-gh"]]
                 ;[:b [:km "cursor: gitbutler-gh"]]
                 ;[:n [:km "cursor: nx-gh"]]
                 ;[:m [:km "cursor: milvus-gh"]]
                 ;[:comma [:km "cursor: fal-gh"]]
                 ;[:period [:km "cursor: stricli-gh"]]
                 ;[:slash [:km "cursor: electrobun-gh"]]
                 ;[:spacebar [:km "cursor: sst-gh"]]
                 ;[:semicolon [:km "open: Supernotes"]]
                 ;[:spacebar :!CTOSi] ; Loom cancel record
                 ;[:l [:km "open: Haptic"]]
                 ;[:0 [:km "w: regex101"]]
                 ;[:e [:km "w: Facebook"]]
                 ;[:n [:km "w: Facebook"]]
                 ;[:u [:km "w: Medium"]]
                 ;[:i [:km "w: Arxiv"]]
                 ;[:o [:km "w: Stack Overflow"]]
                 ;[:p [:km "w: Dropbox"]]
                 ;[:a [:km "w: Amazon"]]
                 ;[:h [:km "w: Twitch"]]
                 ;[:k [:km "Get link (Safari Technology Preview)"]]
                 ;[:j :!COSo] ; Safari URL -> Twitter
                 ;[:j :!COSo] ; Safari URL -> Google
                 ;[:k :!COSo] ; Safari URL -> HN
                 ;[:l :!COSo] ; Safari URL -> Lobsters
                 ;[:semicolon [:km "w: Netlify"]]
                 ;[:z [:km "w: MDN"]]
                 ;[:b [:km "w: Observable"]]
                 ;[:m [:km "w: Meetup"]]
                 ;[:comma [:km "w: Google Drive"]]
                 ;[:period [:km "w: IFTTT"]]
                 ;[:spacebar :!COSr]]} ; Selection -> Google Translate
        {:des "ukey (run files)"
         :rules [:u-mode
                 [:w [:km "edit: run.rs"]]
                 [:e [:km "edit: run.go"]]
                 [:r [:km "edit: run.swift"]]
                 [:i [:km "edit: run.zig"]]
                 [:spacebar [:km "edit: run.py"]]
                 ]}
                 ;[:w [:km "cursor: wasmcloud-gh"]]
                 ;[:e [:km "cursor: remix-gh"]]
                 ;[:r [:km "cursor: remotion-gh"]]
                 ;[:t [:km "cursor: tokio-gh"]]
                 ;[:i [:km "cursor: isograph-gh"]]
                 ;[:escape [:km "cursor: cap-gh"]]
                 ;[:a [:km "cursor: plane-gh"]]
                 ;[:s [:km "cursor: swarms-gh"]]
                 ;[:d [:km "cursor: gumroad-gh"]]
                 ;[:f [:km "cursor: forever-vm-gh"]]
                 ;[:h [:km "cursor: shuttle-gh"]]
                 ;[:g [:km "cursor: sourcegraph-gh"]]
                 ;[:z [:km "cursor: sveltekit-gh"]]
                 ;[:x [:km "cursor: xstate-gh"]]
                 ;[:c [:km "cursor: chakra-ui-gh"]]
                 ;[:v [:km "cursor: svelte-gh"]]
                 ;[:b [:km "cursor: obsidian-gh"]]
                 ;[:n [:km "cursor: nativescript-gh"]]
                 ;[:spacebar [:km "cursor: knip-gh"]]
        {:des "ykey (gh workspaces)"
         :rules [:y-mode
                 [:w [:km "cursor: workos-gh"]]
                 [:i [:km "cursor: builder-gh"]]
                 [:u [:km "cursor: mycloudkit-gh"]]
                 [:o [:km "cursor: leptos-gh"]]
                 [:p [:km "cursor: spark-gh"]]
                 [:h [:km "cursor: authkit-gh"]]
                 [:f [:km "cursor: ffmpeg-gh"]]
                 [:k [:km "cursor: kanidm-gh"]]
                 [:l [:km "cursor: litellm-gh"]]
                 [:semicolon [:km "cursor: markdoc-gh"]]
                 [:b [:km "cursor: obs-studio-gh"]]
                 [:n [:km "cursor: ferron-gh"]]
                 [:m [:km "cursor: axum-gh"]]
                 [:period [:km "cursor: solidis-gh"]]
                 ]}
        {:des "ikey (symbols)"
         :rules [:i-mode
                 [:1 :!S1]
                 [:2 :!S2]
                 [:3 :!Sequal_sign]
                 [:4 :!S8]
                 [:w :!S9]
                 [:e :!S3]
                 [:q :!Sopen_bracket]
                 [:escape :!Sopen_bracket]
                 [:left_command [:km "explain (selection, or paste)"]] ; TODO: bind that to global 1focus explain
                 [:r :!Squote]
                 [:t :quote]
                 [:o :open_bracket] ; [
                 [:p :close_bracket] ; ]
                 [:open_bracket :!Sclose_bracket] ; }
                 [:a :slash]
                 [:s :!Shyphen]
                 [:d :backslash]
                 [:f :hyphen]
                 [:g :!S4]
                 [:h [:km "paste: €"]]
                 [:j :equal_sign]
                 [:l [:hyphen :!Speriod :spacebar]] ; -> arrow (->)
                 [:semicolon :semicolon]
                 [:grave_accent_and_tilde :!Sgrave_accent_and_tilde] ; -> //
                 [:z :!Sslash]
                 [:x :!Sbackslash]
                 [:c :!S7]
                 [:v :!Scomma]
                 [:b [:slash :slash :spacebar]] ; -> //
                 ]}
                 ;[:3 :!S5]
                 ;[:4 :!S8]
                 ;[:left_command [:km "paste: ⌘"]]
                 ;[:left_option [:km "paste: ⌥"]]
                 ;[:left_control [:km "paste: ⌃"]]
                 ;[:left_shift [:km "paste: ⇧"]]
                 ;[:fn [:km "paste: ⇧"]]
                 ;[:caps_lock [:km "Match symbols"]] ; TODO: check if works well
        {:des "okey (alfred)"
         :rules [:o-mode
                 [:1 :!C1]
                 [:2 :!C2]
                 [:3 :!C3]
                 [:4 :!C4]
                 [:5 :!C5]
                 [:6 :!C6]
                 [:tab [:km "open: Yandex Cloud"]]
                 [:q [:km "open: Expo"]]
                 [:w [:km "open: Cloudflare"]]
                 [:e [:km "open: Vercel"]]
                 [:r [:km "open: Stripe"]]
                 [:i [:km "open: Axiom"]]
                 [:escape [:km "open: AWS"]]
                 [:a [:km "open: Codex"]]
                 [:s [:km "open: Grok"]]
                 [:d [:km "open: Sentry"]] ; TODO: move this to better key
                 [:f [:km "open: Claude"]]
                 [:g [:km "open: Google Cloud"]]
                 [:j [:km "open: ChatGPT"]]
                 [:k [:km "open: Jazz Inspector"]] ; TODO: should be part of dashboard (move this to flow) (combine with blade)
                 [:grave_accent_and_tilde [:km "open: AI Studio"]]
                 [:z [:km "open: DeepSeek"]]
                 [:c [:alfred "search emoji" "com.github.jsumners.alfred-emoji"]]
                 ; TODO: mby move this to a key. with fast switch thats not caps + v. should be faster
                 [:v :!TOCclose_bracket] ; contexts window search (only cursor for now) TODO: make generic, good (custom app, friendik) (TODO: modify it so I can search repos to open too)
                 [:b [:km "open: Supabase"]]
                 [:n [:km "open: Ronin"]] ; TODO: when its out again
                 [:m [:km "open: Modal"]]
                 [:left_command [:km "open: Railway"]]
                 [:spacebar [:km "open: Conductor"]]
                 ]}
                 ;[:semicolon [:km "open: PostHog"]]
                 ;[:d [:km "open: Convex"]]
                 ;[:left_command [:km "open: Vultr"]]
                 ;[:u [:km "open: Azure"]]
                 ;[:tab [:km "open: ClaudeWeb"]]
                 ;[:s [:km "open: AlexSideBar"]] ; TODO: moved to codex, test it
                 ;[:x [:km "open: Mistral Chat"]]
                 ;[:x [:km "open: Qwen"]]
                 ;[:left_command [:km "open: 1Focus (dev)"]]
                 ;[:s [:km "open: T3 Chat"]]
                 ;[:v [:km "open: Codex"]]
                 ;[:k [:km "open: Sentry"]]
                 ;[:spacebar [:km "open: 1Focus"]]
                 ;[:d [:km "open: Conductor"]]
                 ;[:left_command [:km "open: ChatGPTWeb"]]
                 ;[:right_command [:km "open: RunPod"]]
                 ;[:escape [:km "open: Perplexity"]]
                 ;[:d [:km "open: Gemini"]]
                 ;[:right_command [:km "open: Neon"]]
                 ;[:tab [:km "open: fal.ai"]]
                 ;[:b [:km "open: Gel Cloud"]]
                 ;[:left_command [:km "open: ClaudeWeb"]]
                 ;[:left_command [:km "open: Perplexity"]]
                 ; TODO: improve. i passed in `__` to make it filter out for clones only before
                 ;[:k [:alfred "search menu bar" "com.tedwise.menubarsearch"]] ; TODO: bind
                 ;[:x [:alfred "search workflows" "org.jeef.workflowdirectory"]] ; TODO: breaks
                 ;[:z [:alfred "search clones and forks" "com.vitorgalvao.alfred.directories"]] ; `=` makes it filter out for clones only TODO: find better way to do this, custom workflow, fast
                 ;[:g [:km "open: Console"]]
                 ;[:v [:km "open: Console"]] ; TODO: move it?
                 ;[:v [:km "open: Grok"]] ; TODO: add when it's not on x.com domain but on x.ai or grok.com (as it messes up X link opening..)
                 ;[:tab [:km "open: Clerk"]]
                 ;[:b [:alfred "search forks" "com.vitorgalvao.alfred.directories"]]
                 ;[:v [:alfred "search clones and forks" "com.vitorgalvao.alfred.directories"]]
                 ;[:grave_accent_and_tilde [:km "activate GitHub search in Arc (repos)"]]
                 ;[:z [:alfred "search forks" "com.vitorgalvao.alfred.directories"]]
                 ;[:escape [:km "open: Membrane"]] ; TODO: move
                 ;[:grave_accent_and_tilde [:km "activate GitHub search in Arc (code)"]] ; TODO: bind it too, with grep, find use for both
                 ;[:grave_accent_and_tilde [:km "open: Modal"]] ; TODO: bind
                 ;[:left_command [:km "open: Claude 2"]] ; TODO: make use of this
                 ; TODO: map i to sentry or honeycomb or axiom..
                 ;[:j [:km "open: Sentry"]] ; TODO: enable back
                 ;[:n :!CTOS9] ; search npm packages TODO: useful, make work
                 ;[:d [:km "open: Preview"]]
                 ;[:j [:km "open: Honeycomb"]]
                 ;[:escape [:km "open: Google Cloud"]]
                 ;[:z :!TCspacebar] ; macOS Emoji Picker
                 ;[:i [:km "open: OpenAI Platform"]]
                 ;[:s [:alfred "search files" "nikivi.manage.notes"]] ; TODO: (make it open in obsidian)
                 ;[:semicolon [:km "open: ChatGPT 2"]]
                 ;[:s [:alfred "search folders" "nikivi.search.folders"]]
                 ;[:g [:km "open: Grafbase"]]
                 ;[:grave_accent_and_tilde [:alfred "search processes" "com.vitorgalvao.alfred.processcontrol"]]
                 ;[:escape [:km "1Password Search"]]
                 ;[:e [:km "open: Cloudflare"]]
                 ;[:e [:km "open: Typefully"]]
                 ;[:e [:km "Make 2Do task"]]
                 ;[:r [:km "Make 2Do task with note as current URL"]]
                 ;[:t [:km "Make 2Do task with Safari title as name + note as current URL"]]
                 ;[:i [:alfred "search alfred" "nikivi.utilities" "?"]]
                 ;[:i [:km "open: Dash (with search)"]]
                 ;[:caps_lock [:alfred "search desktop" "com.vitorgalvao.alfred.directories"]]
                 ;[:s [:alfred "search code" "nikivi.manage.notes"]]
                 ;[:d [:alfred "search repos" "net.deanishe.alfred-git-repos"]]
                 ;[:g [:km "2Do with current url as note (github)"]]
                 ;[:j [:alfred "search dash" "com.kapeli.dash.workflow"]]
                 ;[:j [:km "open: SnippetsLab"]]
                 ;[:j [:km "open: Typefully"]]
                 ;[:b [:km "Add 2Do with current url as note (github)"]]
                 ;[:n [:alfred "search lists" "nikivi.learn.anything"]]
                 ;[:m [:alfred "search lists" "nikivi.awesome.lists"]]
                 ;[:spacebar [:alfred "search PDFs" "nikivi.search.files"]]]}
                 ;[:w :!CObackslash] ; 1Password search
                 ;[:w :!CObackslash] ; 1Password search
                 ;[:e [:km "Make 2Do task"]]
                 ;[:w [:km "open: Cloudflare Dashboard"]]
                 ;[:w [:km "open: Dash (search off)"]]
                 ;[:e [:km "open: Dash (with search)"]]
                 ;[:e [:km "open: ChatGPT GPTs"]]
                 ;[:q [:alfred "search" "com.renfei.SnippetsLab.AlfredWorkflow"]]
                 ;[:spacebar [:km "open: Ask"]]]}
        {:des "pkey (gh workspaces for main deps)"
         :rules [:p-mode
                 ]}
        {:des "openBracketKey (gh workspaces)"
         :rules [:open-bracket-mode
                 [:w [:km "cursor: tldraw-gh"]]
                 [:e [:km "cursor: electric-gh"]]
                 [:r [:km "cursor: rive-gh"]]
                 [:t [:km "cursor: stripe-gh"]]
                 [:u [:km "cursor: kunkun-gh"]]
                 [:i [:km "cursor: vite-gh"]]
                 [:o [:km "cursor: solid-gh"]]
                 [:s [:km "cursor: liveblocks-gh"]]
                 [:f [:km "cursor: codemirror-gh"]]
                 [:g [:km "cursor: monaco-gh"]]
                 [:j [:km "cursor: laminar-gh"]]
                 [:k [:km "cursor: kunkun-gh"]]
                 [:g [:km "cursor: pglite-gh"]]
                 [:z [:km "cursor: zero-gh"]]
                 [:x [:km "cursor: axiom-gh"]]
                 [:v [:km "cursor: devenv-gh"]]
                 [:b [:km "cursor: tinybase-gh"]]
                 [:n [:km "cursor: instantdb-gh"]]
                 [:m [:km "cursor: automerge-gh"]]
                 [:spacebar [:km "cursor: lightning-ai-gh"]]
                 ]}
        {:des "closeBracketKey (gh workspaces)"
         :rules [:close-bracket-mode
                 [:w [:km "cursor: wrpc-gh"]]
                 [:e [:km "cursor: muscle-mem-gh"]]
                 [:r [:km "cursor: stack-error-rs-gh"]]
                 [:a [:km "cursor: nats-gh"]]
                 [:s [:km "cursor: timescale-gh"]]
                 [:d [:km "cursor: wit-deps-gh"]]
                 [:f [:km "cursor: kafka-gh"]]
                 [:spacebar [:km "cursor: river-gh"]]
                 ]}
        ;; TODO: not used, move it to other keys, whatever is useful
        ;{:des ".."
         ;:rules [:caps-mode
                  ;[:s [:km "paste: ✨"]]
                  ;[:j [:km "paste: Thanks ♥️"]]
                  ;[:n [:!Sn :i :k :i :t :a]] ; -> Nikita
                  ;;[:period [:t :h :a :n :k :spacebar :y :o :u]] ; -> thank you
                  ;[:period [:!St :h :a :n :k :spacebar :y :o :u :period :spacebar]] ; -> Thank you.
                  ;[:u [:u :p :d :a :t :e :spacebar]] ; -> update
                  ;[:p [:p :l :e :a :s :e :spacebar]] ; -> please
                 ;;[:1 [:alfred "Screenshot -> Imgur" "com.vitorgalvao.alfred.webscreenshot"]]
                 ;;[:2 :!TO2] ; Screenshot -> Clipboard
                 ;;[:3 :!TO3] ; Screenshot -> Annotate
                 ;;[:4 :!TO9] ; Picture of screen -> Clipboard
                 ;;[:5 :!TO0] ; Picture of screen -> ~/Desktop
                 ;;[:w [:km "wiki: My workflow"]]
                 ;;[:e [:km "edit: Private notes"]]
                 ;;[:r [:km "wiki: Rules"]]
                 ;;[:t [:km "wiki: Processes"]]
                 ;;[:u [:km "Open 2Do Buy"]]
                 ;;[:i [:km "Open 2Do Fix"]]
                 ;;[:o [:km "Open 2Do Tools"]]
                 ;;[:p [:km "Open 2Do Repeat"]]
                 ;;[:open_bracket [:km "w: Goodreads (currently reading)"]]
                 ;;[:close_bracket [:km "w: Goodreads (next)"]]
                 ;;[:s [:km "Open 2Do Wiki"]]
                 ;;[:d [:open "notion://nikitavoloboev/Ideas-0b5a4e8a88f34fe29a1f33dad02e5332"]]
                 ;;[:f [:km "Search 2Do"]]
                 ;;[:g [:km "Open 2Do Life"]]
                 ;;[:h [:open "notion://nikitavoloboev/Learn-05c0eac7be904e0da89cd8a3bf7ab509"]]
                 ;;[:j [:km "Open 2Do Today"]]
                 ;;[:k [:km "Open 2Do GitHub"]]
                 ;;[:l [:km "Open 2Do Later"]]
                 ;;[:semicolon [:km "Open 2Do Starred"]]
                 ;;[:quote [:km "Open 2Do Other"]] ; TODO: remove once its empty
                 ;;[:c [:km "Look back"]]
                 ;;[:v [:km "wiki: Goals"]]
                 ;;[:b [:open "notion://nikitavoloboev/Papers-Courses-8f00c7c500d5460490a5800c5d5db431"]]
                 ;;[:n [:km "Open 2Do Clean"]]
                 ;;[:m [:km "Open 2Do Work"]]
                 ;;[:comma [:km "Open 2Do LA"]]
                 ;[:semicolon [:km "paste: ♥️"]] ; -> ♥️
                 ;[:period [:km "Open 2Do Recent"]]]}
        {:des "akey (ctrl)"
         :rules [:a-mode
                 [:2 :!T2]
                 [:3 :!T3]
                 [:4 :!T4]
                 [:5 :!T5]
                 [:6 :!T6]
                 [:7 :!T7]
                 [:8 :!T8]
                 [:9 :!T9]
                 [:0 :!T0]
                 [:q :!Tq]
                 [:w :!Tw]
                 [:e :!Te]
                 [:r :!Tr]
                 [:t :!Tt]
                 [:i :!Ti]
                 [:o :!To]
                 [:y :!Ty]
                 [:u :!Tu]
                 [:p :!Tp]
                 [:open_bracket :!Topen_bracket]
                 [:close_bracket :!Tclose_bracket]
                 [:s :!Ts]
                 [:d :!Td]
                 [:f :!Tf]
                 [:g :!Tg]
                 [:h :!Th]
                 [:j :!Tj]
                 [:k :!Tk]
                 [:l :!Tl]
                 [:semicolon :!Tsemicolon]
                 [:quote :!Tquote]
                 [:z :!Tz]
                 [:x :!Tx]
                 [:c :!Tc]
                 [:v :!Tv]
                 [:b :!Tb]
                 [:n :!Tn]
                 [:m :!Tm]
                 [:comma :!Tcomma]
                 [:period :!Tperiod]
                 [:slash :!Tslash]
                 [:spacebar :!CT9] ; Selection -> Google
                 ]}
        {:des "dkey (mouse)"
         :rules [:d-mode
                 [:i :!Ckeypad_hyphen] ; Zoom out
                 [:o :!Ckeypad_plus] ; Zoom in
                 [:a [:!Cc :!Ctab]] ; Copy & activate previous app
                 [:j {:mkey {:vwheel 60}}] ; Scroll down
                 [:k {:mkey {:vwheel -60}}] ; Scroll up
                 [:l [:km "Google clipboard"]]
                 [:semicolon :!Tdown_arrow] ; Application Windows (system settings > keyboard > mission control)
                 [:quote [:km "Select line and google"]]
                 [:z {:pkey :button2}] ; Right click
                 [:v {:pkey :button1}] ; Left click
                 [:b {:pkey :button3}] ; Middle click
                 [:n [:km "Open URL in clipboard in Safari"]]
                 [:m [:km "Google Lucky selected word"]]
                 [:comma :!TOS1] ; Show Launchpad (system settings > keyboard > launchpad & dock)
                 [:period :!TOS2] ; Mission Control (system settings > keyboard > mission control)
                 ; TODO: add slash (selected line -> chatgpt or claude or similar)
                 [:spacebar [:km "Selected text into Claude"]] ; TODO: use openai!
                 ]}
                 ;[:spacebar [:km "Google Searchio selected word"]]
                 ;[:spacebar :!CT8] ; Selection -> Dictionary (wiki)
                 ;[:l [:km "Google selected word"]]
        {:des "fkey (essential)"
         :rules [:f-mode
                 [:1 [:km "View Sip"]]
                 [:q [:km "open: Figma Beta (FigJam)"]]
                 [:w [:km "open: Figma Beta"]]
                 [:e :!CO8] ; Alfred clipboard history search
                 [:r [:km "Centre mouse to active app"]]
                 [:tab [:km "open: tldraw"]]
                 [:escape [:km "open: Excalidraw"]]
                 [:a [:km "open: Chrome Canary"]]
                 [:s [:km "open: Grep (in safari tech preview)"]]
                 [:d [:km "open: Simulator"]]
                 ;[:d [:km "open: Electron"]] ; TODO: replace with tauri web or wails (if its better, settle on one)
                 [:h [:km "Make markdown link from selection {link}"]]
                 [:j :!TSspacebar] ; Things Quick Entry (with context) TODO: move to LA quick add
                 [:k [:km "New Linear task"]]
                 [:l :!Creturn_or_enter]
                 [:semicolon [:km "switch between windows of same app (or switch to another app if no more than 1 window)"]]
                 ;[:quote [:km "new Reddit post (in Arc)"]]
                 [:u [:km "clear active todo"]]
                 [:i [:alfred "active todo" "nikiv"]] ; TODO: add somewhere
                 [:o [:km "new X post (in Arc)"]]
                 [:p [:km "Things: new task at bottom (Today)"]] ; TODO: make sure to switch to window with `Today`
                 [:left_command [:km "open: Photos"]]
                 [:quote :!CT5] ; Sleep display
                 [:comma [:km "cursor: .flox:env/manifest.toml"]]
                 [:period [:km "edit: Karabiner"]]
                 ;[:slash [:km "edit: Karabiner.ts"]] ; bring back alfred file/text action after moving to karabiner.ts
                 [:slash :!CTO4] ; Alfred file/text action
                 [:z :!TOCbackslash] ; Switch language (Russian <-> English)
                 [:b [:km "Things: Quick Entry (into Someday)"]]
                 [:n [:alfred "search bookmarks" "net.deanishe.alfred.safari"]] ; TODO: make custom, not just safari bookmarks but context dependant things
                 [:m [:km "Things: new top task (Someday)"]] ; TODO: make sure to switch to window with `Today`
                 [:spacebar [:km "open: Eagle"]]
                 ]}
                 ;[:n [:km "Things: Quick Entry (with context) (into Someday)"]] ; replaced with just f+m & then with keybind add item to bottom
                 ;[:o [:km "Things: new top task (Today)"]] ; TODO: make sure to switch to window with `Today`
                 ;[:p [:km "Things: new 2nd from top task"]]
                 ;[:m [:km "open: Tauri Web"]]
                 ;[:semicolon :!Tspacebar] ; contexts window search (only cursor) TODO: make generic, good
                 ;[:j :!TOCspacebar] ; Things Quick Entry (without context)
                 ;[:n :!TSspacebar] ; Things Quick Entry (with context) TODO: move to LA quick add
                 ;[:d :!TOr] ; Start Wispr Flow push-to-talk transcription (let go on ending of transcription)
                 ;[:s :!TOSe] ; Start Superwhisper transcription
                 ;[:j :!CSspacebar] ; Homerow
                 ;[:q [:km "open: Framer"]]
                 ;[:comma [:km "edit: Flox"]] ; TODO: fix, manifest?
                 ;[:m [:km "Things: new today task at bottom"]]
                 ;[:i [:km "open: bolt"]]
                 ;[:open_bracket :!CT5] ; Turn display on/off
                 ;[:m [:km "open: Midjourney"]]
                 ;[:n [:km "open: Play"]] ; TODO: use
                 ; TODO: use lottie
                 ;[:n [:km "open: Simulator"]]
                 ;[:q [:km "open: Color Picker"]] ; TODO: start picker too fast
                 ;[:comma  [:km "Add safari link to selected markdown text"]] ; TODO: move to another key, s?
                 ;[:i :!Treturn_or_enter]
                 ;[:o :!Oreturn_or_enter]
                 ;[:n :!Freturn_or_enter]
                 ;[:m :!Sreturn_or_enter]
                 ;[:n [:km "New Linear task"]]
                 ;[:j :!CSspacebar]
                 ;[:period [:km "Things task (next in today)"]] ; TODO: make it top Things task. open Things and start writing task that will after `return` be on top
                 ;[:tab [:km "open: Dingboard"]]
                 ;[:grave_accent_and_tilde [:km "Test"]]
                 ;[:s [:km "open: Learn Anything (dev)"]] ; TODO: focus on tauri windows in general, dev more tauri apps. or better focus on simulator if it's open or tauri window if that is open
                 ;[:s :!TOS8] ; Move focus to status menus (show menu bar) (system settings > keyboard > keyboard)
                 ;[:s :!TOSe] ; Start Superwhisper transcription
                 ;[:s [:km "open: Spline"]]
                 ;[:s [:km "open: Simulator"]]
                 ;[:s [:km "open: Learn Anything (dev)"]] ; TODO: make it work on any tauri dev app (KusKus + future tauri dev apps)
                 ;[:a [:km "open: Chrome Canary"]]
                 ;[:s [:km "edit: 2nd Warp tab"]]
                 ;[:escape [:km "open: Draw my UI"]]
                 ;[:n :!STh] ; Record macro TODO: rebind it
                 ;[:s [:!TOreturn_or_enter :!Cs]]
                 ;[:s [:km "open: Eagle"]]
                 ;[:d [:km "Save app state (Safari = top link, etc.)"]]
                 ;[:j [:km "edit: 1st Warp tab"]]
                 ;[:j [:!Sreturn_or_enter :!Cs]]
                 ;[:j [:alfred "search" "com.renfei.SnippetsLab.AlfredWorkflow"]]
                 ;[:j :!CTO0] ; Search Alfred Snippets
                 ;[:j [:km "open: Learn Anything (dev)"]]
                 ;[:semicolon [:km "open: Simulator"]]
                 ;[:semicolon [:km "open: Learn Anything Web"]]
                 ;[:semicolon [:km "New 2Do task"]] ; TODO: replace with nice native modal to do new todo. cmd+return on it moves it to `active todo` and tracks in LA Todo
                 ;[:semicolon [:km "open: Learn Anything Web"]]
                 ;[:semicolon [:escape :!Sa :semicolon :return_or_enter]]
                 ;[:semicolon [:km "open: MindNode"]]
                 ;[:semicolon [:km "New todo"]]
                 ;[:semicolon [:km "Show active todo"]]
                 ;[:quote [:km "Goku Run"]]
                 ;[:quote [:km "edit: Fish functions and alias"]]
                 ;[:semicolon :!Cgrave_accent_and_tilde] ; Switch between active windows (go down)
                 ;[:semicolon [:km "Show active todo (clear todo and go to 2Do if activated again within 3 seconds)"]]
                 ;[:comma [:km "edit: Fish Functions"]]
                 ;[:spacebar :!CTq]]} ; Selection -> Web Searches
                 ;[:escape :!CTOu] ; Sip color picker
                 ;[:q [:km "open: Cosmos"]]
                 ;[:s [:km "open: Excalidraw"]]
                 ;[:q [:km "Clear active todo"]]
                 ;[:q [:km "open: Midjourney"]]
                 ;[:spacebar [:km "open: Eagle"]]]}
                 ;[:spacebar [:km "Copy text to ChatGPT"]]]}
                 ;[:spacebar [:km "Move selected text to Claude or select area screenshot to Claude"]]]}
                 ;[:spacebar [:km "Move selected text to ChatGPT or select area screenshot to ChatGPT"]]]}
        {:des "gkey (actions)"
         :rules [:g-mode
                 [:w :!CSgrave_accent_and_tilde] ; Switch between active windows (go up)
                 [:caps_lock [:km "Go to KM group of current app from picklist"]]
                 [:a [:km "Go to KM group of current app"]]
                 [:d [:km "Dismiss notifications"]]
                 [:h :!CSOa] ; Move window left
                 [:k :!COSf] ; Maximize window
                 [:l :!CSOd] ; Move window right
                 [:semicolon :!COSs] ; Move window between different screen & maximize
                 [:u :!TOS7] ; Move focus to the Dock (system settings > keyboard > keyboard)
                 [:i :!TOS6] ; Move focus to the menu bar (system settings > keyboard > keyboard)
                 [:o :!CSslash] ; Search menu bar (can also jump around menu bar items after with left/right arrow)
                 [:n :!TOS4] ; Turn Do Not Disturb on/off (system settings > keyboard > mission control)
                 [:m :!TOS3] ; Show Notification Centre (system settings > keyboard > mission control)
                 [:comma :!TOS5] ; Show Desktop (system settings > keyboard > mission control)
                 [:quote :!COS6] ; Toggle Night Shift on/off.
                 [:spacebar :!COSu] ; Selection -> HN
                 ]}
                 ;[:q :!CT3] ; Search bartender menu items
                 ;[:j [:km "New KM global macro"]] ; TODO: create global macro from Test (clear test, focus on naming new macro) (maybe, don't use `Test` any more as much)
                 ;[:j :!Cgrave_accent_and_tilde] ; Switch between active windows (go down)
                 ;[:j [:km "New open app's macro"]] ; TODO: macro that will start a new macro in currently open app KM group
                 ;[:semicolon :!COSs] ; Move window to right desktop
                 ;[:z :!CO0] ; Show Dropzone dropdown
        {:des "capskey (workspaces)"
         :rules [:escape-mode
                 [:1 [:km "cursor: 1f-vscode."]]
                 [:2 [:km "cursor: expo."]]
                 [:3 [:km "cursor: effect."]]
                 [:4 [:km "cursor: encore."]]
                 [:9 [:km "cursor: cpp."]]
                 [:0 [:km "cursor: zig."]]
                 [:hyphen [:km "cursor: elixir."]]
                 [:q [:km "cursor: myflow."]]
                 [:w [:km "cursor: rust."]]
                 [:e [:km "cursor: go."]]
                 [:r [:km "cursor: raycast."]]
                 [:t [:km "cursor: gitedit."]]
                 [:y [:km "cursor: anysynth."]]
                 [:u [:km "cursor: kus."]]
                 [:i [:km "cursor: ui."]]
                 [:o [:km "cursor: sb."]]
                 [:p [:km "cursor: mbt."]]
                 [:open_bracket [:km "cursor: gpton."]]
                 [:close_bracket [:km "cursor: gridchess."]]
                 [:a [:km "cursor: f-native."]]
                 [:s [:km "cursor: 1f-sdk."]]
                 [:d [:km "cursor: 1f-cli."]]
                 [:f [:km "cursor: f."]]
                 [:g [:km "cursor: 1f-glide."]]
                 [:h [:km "cursor: infra."]]
                 [:j [:km "cursor: ts."]]
                 [:k [:km "cursor: nikiv."]]
                 [:l [:km "cursor: la."]]
                 [:semicolon [:km "cursor: 1f."]]
                 [:quote [:km "cursor: genx."]] ; train, eval, etc. (nanochat, ..)
                 [:x [:km "cursor: x."]]
                 [:c [:km "cursor: config."]]
                 [:v [:km "cursor: other"]]
                 [:b [:km "cursor: blade."]]
                 [:n [:km "cursor: new."]]
                 [:m [:km "cursor: mojo."]]
                 [:comma [:km "cursor: riplay."]]
                 [:period [:km "cursor: fr."]] ; friendik (swift + blade)
                 [:slash [:km "cursor: linsa."]]
                 [:left_command [:km "cursor: swift."]]
                 [:spacebar [:km "cursor: py."]]
                 [:right_command [:km "cursor: kotlin."]]
                 ]}
                 ;[:a [:km "cursor: gleam."]] ; + elixir
                 ; TODO: mby useful to have core. with just effect there
                 ;[:1 [:km "cursor: hono."]] ; + cap & web, openapi
                 ;[:1 [:km "cursor: elysia."]]
                 ;[:s [:km "cursor: search."]] ; includes raycast/alfred + mirror searches to s.nikiv.dev (+ ingest) (moved to search & f.)
                 ;[:t [:km "cursor: eventsline."]]
                 ;[:f [:km "cursor: tools."]] ; includes ui. (tailwind/panda) + wip stuff (extract as tool or lib etc.)
                 ;[:1 [:km "cursor: elysia."]]
                 ;[:comma [:km "cursor: editor."]] ; vscode / zed
                 ;[:b [:km "cursor: blade."]] ; with jazz (& elements of convex)
                 ;[:slash [:km "cursor: genx."]] ; ai train, evals, models (global dash)
                 ;[:left_command [:km "cursor: ui."]]
                 ;[:1 [:km "cursor: elysia."]]
                 ;[:s [:km "cursor: docs."]]
                 ;[:t [:km "cursor: ext."]] ; ext, client, AS dash (move it into 1F/SB later)
                 ;[:m [:km "cursor: 1f-ios."]] ; TODO: briefly. then move to just 1f. (& bring mojo. here)
                 ;[:comma [:km "cursor: zig."]]
                 ;[:s [:km "cursor: search."]]
                 ;[:left_command [:km "cursor: as."]] ; TODO: will be moved
                 ;[:k [:km "cursor: as."]] ; includes api
                 ;[:comma [:km "cursor: unison."]]
                 ;[:d [:km "cursor: docs."]]
                 ;[:u [:km "cursor: odin."]]
                 ;[:u [:km "cursor: elixir."]]
                 ;[:v [:km "cursor: vscode."]]
                 ;[:v [:km "cursor: convex."]]
                 ;[:v [:km "cursor: reatom."]]
                 ;[:r [:km "cursor: garden."]]
                 ;[:q [:km "cursor: wip."]]
                 ;[:right_command [:km "cursor: kotlin."]]
                 ;[:s [:km "cursor: sb."]]
                 ;[:h [:km "cursor: deps."]]
                 ;[:p [:km "cursor: past."]]
                 ;[:a [:km "cursor: learn."]] ; repos connected with wiki for note taking/learning (deps. is used for it now)
                 ;[:p [:km "cursor: deps."]] ; opentui, ai-sdk, ..
                 ;[:t [:km "cursor: eventsline."]]
                 ;[:h [:km "cursor: deps."]] ;
                 ;[:comma [:km "cursor: elixir."]]
                 ;[:u [:km "cursor: unison."]]
                 ;[:slash [:km "cursor: swift."]]
                 ;[:d [:km "cursor: deps."]]
                 ;[:i [:km "cursor: infra."]] ; TODO: includes api. & cli. too | add it to caps + left_cmd
                 ;[:quote [:km "cursor: kotlin."]]
                 ;[:d [:km "cursor: garden."]]
                 ;[:h [:km "cursor: ext."]]
                 ;[:s [:km "cursor: deps."]]
                 ;[:open_bracket [:km "cursor: past."]]
                 ;[:comma [:km "cursor: gleam."]]
                 ;[:s [:km "cursor: eventsline."]]
                 ;[:z [:km "cursor: games."]]
                 ;[:slash [:km "cursor: elixir."]]
                 ;[:4 [:km "cursor: reatom."]]
                 ;[:h [:km "cursor: ghostty."]]
                 ;[:9 [:km "cursor: xs."]]
                 ;[:u [:km "cursor: unison."]]
                 ;[:slash [:km "cursor: gleam."]]
                 ;[:quote [:km "cursor: c."]]
                 ;[:comma [:km "cursor: kotlin."]]
                 ;[:a [:km "cursor: gitedit."]]
                 ;[:i [:km "cursor: elixir."]]
                 ;[:i [:km "cursor: i."]]
                 ;[:t [:km "cursor: notlost."]]
                 ;[:d [:km "cursor: data."]]
                 ;[:d [:km "cursor: test."]]
                 ;[:quote [:km "cursor: lean."]]
                 ;[:spacebar [:km "cursor: wip."]]
                 ;[:left_command [:km "cursor: generated."]]
                 ;[:1 [:km "cursor: expo-rn-gh"]]
                 ;[:2 [:km "cursor: effect-gh"]]
                 ;[:3 [:km "cursor: encore-hono-gh"]]
                 ;[:4 [:km "cursor: react-gh"]]
                 ;[:h [:km "cursor: waffle."]]
                 ;[:close_bracket [:km "cursor: notlost."]]
                 ;[:b [:km "cursor: workflow."]]
                 ;[:open_bracket [:km "cursor: kotlin."]]
                 ;[:a [:km "cursor: train."]]
                 ;[:slash [:km "cursor: mojo."]]
                 ;[:o [:km "cursor: -gh"]] ; TODO: technically probably should just be `other` but there is weird thing when many `other` windows are open. can make caps+o be smth else like alfred-raycast?
                 ;[:a [:km "cursor: mojo."]]
                 ;[:v [:km "cursor: try."]]
                 ;[:left_command [:km "cursor: docs."]] ; TODO: does it make sense to have docs. ?
                 ;[:s [:km "cursor: locality."]]
                 ;[:s [:km "cursor: projects!"]]
                 ;[:a [:km "cursor: genx."]]
                 ;[:q [:km "cursor: ai."]]
                 ;[:v [:km "cursor: jazz."]]
                 ;[:w [:km "cursor: locality."]]
                 ;[:close_bracket [:km "cursor: past."]]
                 ;[:d [:km "cursor: locality."]]
                 ;[:s [:km "cursor: data."]]
                 ;[:p [:km "cursor: api."]]
                 ;[:a [:km "cursor: data."]]
                 ;[:p [:km "cursor: past."]]
                 ;[:s [:km "cursor: _new"]]
                 ;[:slash [:km "cursor: odin."]]
                 ;[:close_bracket [:km "cursor: xd."]]
                 ;[:s [:km "cursor: -test"]] ; TODO: instead of activating `search test code-workspace` when already on _test, it should search existing _test instances or open new ones in one alfred search
                 ;[:o [:km "cursor: clones/forks"]]
                 ;[:p [:km "cursor: past."]] ; TODO: make work (last month, with ability to change fast)
                 ;[:quote [:km "cursor: 1f."]]
                 ;[:2 [:km "cursor: gitedit."]] ; TODO: setup (view projects at some point in time from commit, bootstrap, run, branches etc.)
                 ;[:quote [:km "cursor: ocaml."]]
                 ;[:spacebar [:km "cursor: nikiv-ui."]]
                 ;[:i [:km "cursor: scala."]]
                 ;[:o [:km "cursor: clones"]] ; TODO: make it robust, so it switches to last clone you went to always (sqlite store etc.)
                 ;[:r [:!Tspacebar :!S3]] ; search cursor windows with `#` TODO: change with custom search workflow
                 ;[:b [:km "cursor: odin."]]
                 ;[:a [:km "cursor: raycast."]]
                 ;[:r [:km "cursor: alfred."]]
                 ;[:comma [:km "cursor: zig."]]
                 ;[:r [:!Tspacebar :!S3]] ; search cursor windows with `#`
                 ;[:t [:alfred "search all code-workspace" "nikiv", " "]]
                 ;[:h [:km "cursor: deno#"]] ; move it to ts. maybe
                 ;[:r [:alfred "search test code-workspace" "nikiv", " "]] ; TODO: there should be no need for this, remove
                 ;[:b [:km "cursor: odin."]]
                 ;[:s [:km "cursor: data."]]
                 ;[:v [:km "cursor: projects"]] ; TODO: for now hard opens 1focus, make it smarter, do search over things
                 ;[:g [:km "cursor: odin."]]
                 ;[:r [:km "cursor: past (past month)"]] ; TODO: do (see how useful, maybe best do just search over it as opening it in zed/cursor is too cpu intensive with checks)
                 ;[:t [:km "cursor: past (all)"]] ; TODO: do (see how useful, maybe best do just search over it as opening it in zed/cursor is too cpu intensive with checks)
                 ;[:q [:km "New KM global macro"]] ; TODO: create global macro from Test (clear test, focus on naming new macro) (not needed with )
                 ;[:d [:km "Move active `Test` KM macro actions"]] to a group with custom name (alfred show a list of groups to current actions in `Test` into)
                 ; TODO: move active actions in `Test` macro to new global macro (delete those actions from `Test` too) (similar to `New KM global macro`)
                 ; TODO: make alfred/raycast thing to search for folders/files etc.
                 ;[:d [:km "cursor: data."]]
                 ;[:i [:km "cursor: forks"]]
                 ;[:c [:km "cursor: clients."]] ; TODO: add when I have client work (add on LA profile as services)
                 ;[:k [:km "cursor: sites."]]
                 ;[:period [:km "cursor: zig."]]
                 ;[:i [:km "cursor: cpp."]]
                 ;[:g [:km "cursor: genx"]]
                 ;[:quote [:km "cursor: forks"]] ; TODO: with 3 `---`?
                 ;[:v [:km "cursor: nikiv.dev"]]
                 ;[:comma [:km "cursor: lisa"]]
                 ;[:v [:km "cursor: private"]]
                 ;[:i [:km "cursor: config"]]
                 ;[:o [:km "cursor: other"]]
                 ;[:period [:km "cursor: forks"]]
                 ; TODO: consider adding back
                 ;[:v :left_shift]
                 ;[:##j :!Cdown_arrow]
                 ;[:##k :!Cup_arrow]
                 ;[:##l :!Cright_arrow]
                 ;[:##h :!Cleft_arrow]
                 ;[:##semicolon :!Oup_arrow]
                 ;[:##quote :!Odown_arrow]
                 ;[:##n :!Oleft_arrow]
                 ;[:##m :!Oright_arrow]
                 ;[:i [:km "w: Iconic"]]
                 ;[:v [:km "w: Pitch"]]
                 ;[:w [:alfred "toggle wifi" "nikivi.wifi.tools"]]
                 ;[:r [:alfred "restart wifi" "nikivi.wifi.tools"]]
                 ;[:d [:km "Do debug build of LA"]]
                 ;[:w [:km "w: Cloudflare Workers & Pages"]]
                 ;[:e [:km "w: Baselime LA logs"]]
                 ;[:f [:km "w: Cloudflare LA deployments"]]
                 ;[:g [:km "w: Grafbase LA logs"]]
                 ;[:spacebar :!COSn]]} ; Selection -> GitHub ; TODO: move it to another key (on s?)
        ; TODO: move to 1f sessions (with ghostty embedded)
        {:des "tilkey (agents)" ; should be 1f window with deeplink, for now ghostty mby?
         :rules [:tilde-mode
                  ; TODO: can use ghostty too. in future all should be in 1f
                  [:q [:km "warp: flow"]]
                  [:w [:km "warp: rust"]]
                  [:e [:km "warp: go"]]
                  [:r [:km "warp: vscode"]]
                  [:u [:km "warp: kus"]]
                  [:i [:km "warp: gitedit"]]
                  [:o [:km "warp: sb"]]
                  [:p [:km "warp: cpp"]]
                  [:open_bracket [:km "warp: gridchess"]]
                  [:a [:km "warp: gleam"]]
                  [:s [:km "warp: gpton"]]
                  ;[:d [:km "warp: deps"]] ; TODO: deps?
                  [:f [:km "warp: f"]]
                  [:g [:km "warp: zig"]]
                  [:h [:km "warp: opencode"]]
                  [:j [:km "warp: ts"]]
                  [:k [:km "warp: nikiv"]]
                  [:l [:km "warp: la"]]
                  [:semicolon [:km "warp: 1f"]]
                  [:x [:km "warp: x"]]
                  [:c [:km "warp: config"]]
                  ;[:v [:km "warp: other"]]
                  ;[:b [:km "warp: bun"]]
                  [:n [:km "warp: new"]]
                  [:m [:km "warp: mojo"]]
                  [:period [:km "warp: swift"]]
                  [:slash [:km "warp: mbt"]]
                  [:spacebar [:km "warp: py"]]
                 ]}
                  ;[:spacebar [:km "warp: tmp"]]
                 ;[:semicolon [:km "ghostty: home"]] ; TODO: make work. or move to another key
                 ; TODO: move run .. to separate key
                  ;[:l [:km "open: EdgeDB Cloud"]]
                  ;[:k [:km "paste: That worked 🖤"]]
                  ;[:m [:km "paste: Cal.com (30 min)️"]]
                  ;[:spacebar [:km "Screenshot into ChatGPT and explain"]]
                  ;[:j [:km "paste: Thanks ♥️"]]
                  ;[:j [:km "paste: thanks"]]
                  ;[:k [:km "paste: Thank you."]]
                  ;[:period [:km "paste: that worked 🖤"]]
                  ;[:n [:km "paste: Nikita"]]
                  ;[:spacebar [:km "Selected text into Google Lucky search"]]]}
        {:des "zkey (chat)"
         :rules [:z-mode
                 [:e [:km "open: Telegram"]]
                 [:f [:km "open: Spark"]]
                 [:u [:km "open: Zulip"]]
                 ;[:i :!CO7] ; open Tuple menu bar
                 [:o [:km "open: Loops"]]
                 ;[:h :!COTS6] ; Tuple hang up
                 [:j [:km "Search Discord"]]
                 [:k [:km "open: Zoom"]]
                 [:l [:km "Search Telegram"]]
                 [:semicolon [:km "open: Slack"]]
                 [:u [:km "Create new contact"]]
                 [:c [:km "open: WhatsApp"]]
                 [:b [:km "open: Cal"]]
                 [:n [:km "New Spark email"]] ; TODO: add back when old habits die off
                 [:m [:km "open: Resend"]]
                 [:period [:alfred "search contacts" "nikivi.search.content"]]
                 [:slash [:km "open: Google Meet"]]
                 [:spacebar [:km "open: Contacts"]] ; TODO: replace with LA
                 ]}
                 ;[:comma [:km "open: Signal"]]
                 ;[:k [:km "Search Monologue messages"]]
                 ;[:k [:km "open: Telegram"]] ; TODO: should be replaced as its on space + l too
                 ;[:k [:km "new X post (in Arc)"]]
                 ;[:n [:km "new Reddit post (in Arc)"]]
                 ;[:m [:km "open: Element"]]
                 ;[:l [:km "open: Typefully"]] ; TODO: get working, replace
                 ;[:l [:km "w: Typefully"]]
                 ;[:l [:km "open X messages (in Dia)"]]
                 ;[:l [:km "open: GPTON"]] ; TODO: kuskus
                 ;[:o [:km "open: Telegram Web"]]
                 ;[:l [:km "open: Beeper"]]
                 ;[:l [:km "open: Texts"]]
                 ;[:i [:km "open: Tuple"]] ; TODO: doesn't seem to do anything
                 ;[:l [:km "open: Texts"]]
                 ;[:period [:km "web: Cal.video"]]
                 ; TODO: add google video
                 ;[:l [:km "open: Texts"]]
                 ;[:spacebar :!CSOz] ; X search TODO: check bind
                 ;[:s :!CTOSe] ; Loom recording restart
                 ;[:d :!CTOSr] ; Loom recording pause/unpause
                 ;[:c :!CTOSh] ; Loom recording cancel
                 ;[:v :!CTOSg] ; Loom recording
                 ;[:b :!CTOSw] ; Loom recording draw ; TODO: fails on loom..
                 ; TODO: bind LA post (nice one)
                 ; TODO: have have way to make emails (that can be mass sent from say Loops or smth else, check that email platform thats oss)
                 ;[:h [:km "w: HN submit"]] ; TODO: move this to nicer keys outside of z
                 ;[:b [:km "w: Lobsters submit"]]
                 ;[:i [:km "open: Cal.com"]]
                 ;[:v [:km "open: Multi"]]
                 ; TODO: add generic `LA Post` function later maybe or have another bind for `LA Post`
                 ;[:period [:km "w: Twitter Search"]]
                 ;[:b [:km "w: Twitter"]]
                 ;[:n [:km "w: Twitter Compose"]]
                 ;[:m [:km "w: Twitter Compose with current URL pasted"]]
                 ;[:v [:km "open: Mimestream"]]
                 ;[:o [:km "open: FaceTime"]]
                 ;[:o [:km "open: Around"]]
                 ;[:d [:km "open: Mimestream"]]
        {:des "xkey (songs, play)"
         :rules [:x-mode
                 [:o [:km "Paste current Spotify song link"]]
                 [:open_bracket [:alfred "twitter_search_current_track" "com.vdesabou.spotify.mini.player"]]
                 [:close_bracket [:alfred "add_current_track_to" "com.vdesabou.spotify.mini.player" "spotify:playlist:2N82DnDsPGMnpJhN8sVFJu"]] ; Add song to Bliss playlist
                 [:j [:alfred "show_alfred_playlist" "com.vdesabou.spotify.mini.player"]]
                 [:k [:alfred "show_current_track" "com.vdesabou.spotify.mini.player"]]
                 [:semicolon [:alfred "add_current_track_to_alfred_playlist_or_your_music" "com.vdesabou.spotify.mini.player"]] ; Add song to Likes playlist
                 [:quote [:alfred "add_current_track_to" "com.vdesabou.spotify.mini.player" "spotify:playlist:0ESjwZeTcHOWzY3FYO5zs5"]] ; Add song to Focus playlist
                 [:n [:alfred "add_current_track_to" "com.vdesabou.spotify.mini.player"]]
                 [:m [:alfred "remove_current_track_from" "com.vdesabou.spotify.mini.player"]]
                 [:comma [:alfred "show_search_online" "com.vdesabou.spotify.mini.player"]] ; TODO: split up further into binds for direct searches of tracks/artists/all
                 [:period [:alfred "youtube_search_current_track" "com.vdesabou.spotify.mini.player"]]
                 [:slash [:alfred "reddit_search_current_track" "com.vdesabou.spotify.mini.player"]]
                 ]}
                 ;[:comma [:alfred "youtube_search_current_track" "com.vdesabou.spotify.mini.player"]] ; TODO: twitter search
        {:des "ckey (paste)"
         :rules [:c-mode
                  [:q [:km "paste: Telegram (personal)️"]]
                  [:w [:km "paste: personal nikita.vo@ email"]]
                  [:e [:km "paste: personal nikita@ email"]]
                  [:u [:km "paste: update"]]
                  [:o [:km "paste: 🙏"]]
                  [:p [:km "paste: ✨"]]
                  [:a [:km "paste: 😺"]]
                  [:s [:km "paste: 😿"]]
                  [:d [:km "paste: delete"]]
                  [:h [:km "paste: 👋"]]
                  [:j [:km "enter: thx"]]
                  [:k [:km "paste: nikiv"]]
                  [:l [:km "paste: Cal.com (15 min)️"]]
                  [:n [:km "paste: nikivdev"]]
                  [:semicolon [:km "paste: 🖤"]]
                 ]}
                 ;[:spacebar :!CSOp] ; Selection -> Reddit
                 ;[:n [:km "paste: nikitavoloboev"]]
                 ;[:period [:km "paste: pls "]]
                 ;[:spacebar :!CSOy] ; Selection -> Stack Overflow
                 ;[:k [:km "cursor: ui"]]
                 ; TODO: ' bind nice
                 ;[:slash [:km "edit: Fish alias/functions (past)"]]
                 ;[:k [:km "cursor: py:scripts/p-run.ts"]]
                 ;[:l [:km "open: Val Town"]]
                 ;[:comma [:km "zed: workspaces"]]
                 ;[:k [:km "open: Membrane"]]
                 ;[:period [:km "edit: run.py"]]
                 ;[:l [:km "edit: Solid"]]
                 ;[:tab [:km "proj: Learning"]]
                 ;[:slash [:km "edit: KusKus todo"]]
                 ;[:comma [:km "edit: Config todo"]]
                 ;[:u [:km "run: Rust"]]
                 ;[:i [:km "run: Julia"]] ; TODO: maybe use Pluto.jl notebook
                 ;[:o [:km "run: Deno"]]
                 ;[:a [:km "Clone repo to ~/clones and open with Zed"]]
                 ;[:d [:km "Clone repo to ~/src/clones and open with VS Code"]] ; TODO: open with Xcode
                 ;[:j [:km "run: Bash"]]
                 ;[:k [:km "run: Go"]]
                 ;[:l [:km "run: Python"]]
                 ;[:k [:km "edit: TS todo"]]
                 ;[:semicolon [:alfred "search learning" "nikivi.private.directories"]]
                 ;[:quote [:km "proj: Go"]]
                 ;[:n [:km "run: Node"]]
                 ;[:m [:km "run: Swift"]]
                 ;[:period [:km "edit: LA todo"]]
                 ;[:period [:km "edit: Dotfiles Magefile"]]
                 ;[:j :!SOTw] ; Replies
                 ;[:k :!SOTf] ; App specific
                 ;[:l :!SOTr] ; Personal
                 ;[:o [:km "Lowercase and dash separate text"]]
                 ;[:j [:km "w: nikiv.dev"]]
                 ;[:k [:km "w: GitLab"]]
                 ;[:l [:km "w: Repl.it"]]
                 ;[:period [:km "w: CodeSandbox"]]]}
        {:des "vkey (media)"
         :rules [:v-mode
                 [:q :illumination_decrement]
                 [:w :illumination_increment]
                 [:e [:km "Change macOS appearance (dark/light)"]]
                 [:i :display_brightness_decrement]
                 [:o :display_brightness_increment]
                 [:s [:km "Play/Pause Spotify"]]
                 [:d [:km "Repeat Spotify song"]] ; TODO: do in background
                 [:h :vk_consumer_previous]
                 [:j :mute]
                 [:k :vk_consumer_play]
                 [:l :vk_consumer_next]
                 [:semicolon [:km "Search Spotify"]]
                 [:n :volume_decrement]
                 [:m :volume_increment]
                 ]}
                 ;[:escape [:km "open: Endel"]]
                 ; TODO: bind nice for ' (play `One` or `Past One's`)
                 ;[:spacebar :!CSOv] ; Selection -> Google Images ; TODO: bind, useful
                 ;[:a [:km "Play/Pause Endel"]] ; TODO: in background, email them again
                 ;[:z [:alfred "song_radio" "com.vdesabou.spotify.mini.player"]] ; TODO: fix up, useful
                 ;[:b [:alfred "show_playlists" "com.vdesabou.spotify.mini.player"]] ; TODO: raycast
                 ;[:semicolon [:alfred "spot_mini" "com.vdesabou.spotify.mini.player"]] ; TODO: raycast spotify
                 ;[:p [:alfred "play" "com.vdesabou.spotify.mini.player" "spotify:playlist:37i9dQZEVXcMHpP6EcIqNe"]] ; Discover Weekly
                 ;[:open_bracket [:alfred "play" "com.vdesabou.spotify.mini.player" "spotify:playlist:0ERn0U4qZIKC8Dy7RrMMsn"]] ; Likes
                 ;[:close_bracket [:alfred "play" "com.vdesabou.spotify.mini.player" "spotify:playlist:2N82DnDsPGMnpJhN8sVFJu"]] ; Bliss
                 ;[:quote [:alfred "play" "com.vdesabou.spotify.mini.player" "spotify:playlist:5fIL0WiQ79QtgsP4Y4L20V"]] ; Inspired TODO: fix up spotify mini player
                 ;[:backslash [:alfred "play" "com.vdesabou.spotify.mini.player" "spotify:track:3zy0JafsRQJgAMU67hnjYX"]] ; Focus Get Hyped
                 ;[:grave_accent_and_tilde [:alfred "artist_radio" "com.vdesabou.spotify.mini.player"]]
                 ;[:comma [:alfred "play" "com.vdesabou.spotify.mini.player" "spotify:playlist:1V6E19oxBxrOHYRkNYLlm5"]] ; Offline
                 ;[:period [:alfred "play" "com.vdesabou.spotify.mini.player" "spotify:track:3R38IXWFcoxYBdUkmxaoyy"]] ; Rain
                 ;[:slash [:alfred "play" "com.vdesabou.spotify.mini.player" "spotify:track:4G0m7oplySbleIlWeLu3vH"]] ; Focus song
                 ;[:a [:open "raycast://extensions/mattisssa/spotify-beta/search"]] ; Raycast Spotify Search
                 ;[:escape [:alfred "play" "com.vdesabou.spotify.mini.player" "spotify:track:4F0sgXdji5yB1Gb9daWwqy"]] ; the focus song
                 ;[:d :!CO9] ; Connect/disconnect AirPods
                 ;[:comma [:alfred "play" "com.vdesabou.spotify.mini.player" "spotify:playlist:0ESjwZeTcHOWzY3FYO5zs5"]] ; Focus
                 ;[:comma [:km "Play Spotify local song"]]
                 ;[:slash [:alfred "play" "com.vdesabou.spotify.mini.player" "spotify:track:58FDTnjuNlUMyLY1airrrD"]] ; Focus song
                 ;[:slash [:alfred "play" "com.vdesabou.spotify.mini.player" "spotify:track:2lF5acSU8Vu9292cthQmc5"]] ; Focus song
                 ;[:slash [:alfred "play" "com.vdesabou.spotify.mini.player" "spotify:track:3jI7Yeg7a2d7BMc8CxABVM"]] ; Focus song
                 ;[:slash [:alfred "play" "com.vdesabou.spotify.mini.player" "spotify:track:6eKOshIu2rtjm3HivUaCWh"]] ; Focus song
                 ;[:slash [:alfred "play" "com.vdesabou.spotify.mini.player" "spotify:track:4tnWEXeAgZWTRULCkJ6IGL"]] ; Focus song
                 ;[:slash [:alfred "play" "com.vdesabou.spotify.mini.player" "spotify:track:5f5S32oPDjAUzBpOaNXFzV"]] ; Focus song
                 ;[:slash [:alfred "play" "com.vdesabou.spotify.mini.player" "spotify:track:4iORPRB30LonHaKwkctjyE"]] ; Focus song
                 ;[:slash [:alfred "play" "com.vdesabou.spotify.mini.player" "spotify:track:52o0rOFFGNEekY4o0xV0AK"]] ; Focus song
                 ;[:slash [:alfred "play" "com.vdesabou.spotify.mini.player" "spotify:track:493uQXwZsTDHAkjWXImR7K"]] ; Focus song (slow)
        {:des "bkey (actions)"
         :rules [:b-mode
                 [:o [:km "cursor: ~/config/fish/fn.fish"]] ; TODO: bind to run.swift, move fish alias to something nice too
                 [:h [:km "edit: GitHub Bio"]]
                 [:j [:km "cursor: config:fish/i/fish/i.fish"]]
                 [:k [:km "cursor: config:fish/config.fish"]]
                 [:l [:km "Test"]]
                 [:semicolon [:km "Go to test macro"]]
                 [:spacebar [:km "New KM global macro"]]
                 ]}
        ; TODO: deeplink open certain chats/spaces/projects in 1f
        {:des "nkey (pages)"
         :rules [:n-mode
                 ; TODO: not used, check if useful
                 [:1 :!O1]
                 [:2 :!O2]
                 [:3 :!O3]
                 [:4 :!O4]
                 [:5 :!O5]
                 [:6 :!O6]
                 [:tab [:km "reflect: Routines"]] ; should be part of friendik (macOS always on check app too, cluely style)
                 [:q [:km "reflect: Raise"]]
                 [:w [:km "reflect: Now"]]
                 [:e [:km "reflect: Learn"]]
                 [:r [:km "reflect: Hire"]]
                 [:t [:km "reflect: Nutrition"]]
                 [:o [:km "reflect: Books"]]
                 [:escape [:km "reflect: Invest"]]
                 [:a [:km "reflect: Plan"]]
                 [:s [:km "reflect: Habits"]]
                 [:d [:km "reflect: Projects"]]
                 [:f [:km "Search Reflect"]]
                 [:g [:km "reflect: Health"]]
                 [:h [:km "reflect: Photos"]]
                 [:k [:km "reflect: Music"]]
                 [:l [:km "reflect: Style"]]
                 [:semicolon [:km "reflect: Love"]]
                 [:grave_accent_and_tilde [:km "reflect: Visit"]]
                 [:z [:km "reflect: Meet"]]
                 [:c [:km "reflect: Events"]]
                 [:v [:km "reflect: Budget"]] ; TODO: move to sb, combine with token profits
                 [:b [:km "reflect: Buy"]]
                 [:period [:km "reflect: Family"]]
                 [:left_command [:km "reflect: Flow"]]
                 [:spacebar [:km "reflect: Journal"]]
                 ]}
                 ;[:period [:km "reflect: Focus"]] ; TODO: move to la & hove each bullet have live top data from each of the pages there
                 ;[:grave_accent_and_tilde [:km "reflect: Ideas"]]
                 ;[:s [:km "reflect: Use"]]
                 ;[:v [:km "reflect: Videos"]]
                 ;[:s [:km "reflect: Posts"]]
                 ;[:semicolon [:km "reflect: Move"]]
                 ;[:spacebar [:km "reflect: Changes"]]
                 ;[:quote [:km "reflect: Love"]]
                 ;[:tab [:km "reflect: Funny"]]
                 ; TODO: was used before, fix. move to good place
                 ;[:a [:alfred "search websites" "nikivi.web.searches"]]
                 ;[:s [:alfred "search github" "nikiv.search.the.web"]]
                 ;[:d [:alfred "search hn" "nikiv.search.the.web"]]
                 ;[:e [:alfred "search repos" "me.lachlan.githubjump"]]
                 ;[:f [:raycast "anybox/anybox/search"]]
                 ;[:r [:alfred "search reddit" "nikivi.search.the.web"]]
                 ;[:grave_accent_and_tilde [:alfred "search learn anything" "nikivi.learn.anything"]]
                 ;[:w [:alfred "search lobsters" "nikivi.search.the.web"]]
                 ; TODO: bind good things to e, w, s, d, r, escape
                 ;[:c [:alfred "search wiki" "nikivi.mind"]]
                 ;[:d [:alfred "search stack overflow" "net.deanishe.alfred-stackoverflow"]]
                 ;[:v [:alfred "search links" "nikivi.mind"]]
                 ;[:a [:alfred "search shares" "nikivi.ask.create.share"]]
                 ;[:t [:alfred "search subs" "net.deanishe.alfred-reddit"]]
                 ;[:t [:alfred "ssh" "net.deanishe.alfred-ssh"]]
                 ;[:r [:km "Search Reddit"]]
                 ;[:w [:alfred "search twitter" "nikivi.search.the.web"]]
                 ;[:g [:alfred "search godoc" "nikivi.search.the.web"]]
                 ;[:d [:alfred "search packages" "com.sindresorhus.npms"]]
                 ;[:v [:alfred "search pinboard" "nikivi.search.the.web"]] ; TODO: topics/search/more?
                 ;[:spacebar [:alfred "search history" "net.deanishe.alfred.safari"]]]}
                 ;[:spacebar [:km "New 2Do task"]]]}
                 ;[:spacebar [:alfred "search websites" "nikivi.web.searches"]]]}
        {:des "mkey (apps)"
         :rules [:m-mode
                 [:q [:alfred "search downloads" "recentdownloads.ddjfreedom"]]
                 [:w [:km "open: RustRover"]]
                 [:e [:km "open: GoLand"]]
                 [:r [:km "open: Encore (local)"]]
                 [:tab [:km "open: NotePlus"]]
                 [:escape [:km "open: Rivet"]]
                 [:a [:km "open: Rive"]]
                 [:s [:km "open: Lottie"]]
                 [:d [:km "open: Bolt"]]
                 [:f [:km "open: v0"]]
                 [:g [:km "open: Google Maps"]]
                 [:l [:km "open: Gel"]] ; TODO: move prob (this is for LA)
                 [:z [:km "open: Zed"]] ; TODO: move
                 [:v [:km "open: Leap"]]
                 [:b [:km "open: Lovable"]]
                 [:grave_accent_and_tilde [:km "open: Transmit"]]
                 [:spacebar [:km "open: Music"]]
                 [:left_command [:km "open: TablePlus"]]
                 ]}
                 ;[:spacebar [:km "open: PyCharm"]]
                 ;[:escape [:km "open: T3 Chat"]]
                 ;[:z [:km "open: T3 Chat"]]
                 ;[:a [:km "open: Windsurf"]]
                 ;[:w [:km "open: Google Docs"]]
                 ;[:a [:km "open: Lovable"]]
                 ;[:f [:km "open: Drive"]]
                 ;[:r [:km "open: Trieve"]]
                 ;[:t [:km "open: DigitalOcean"]]
                 ;[:g [:km "open: GitButler"]]
                 ;[:a [:km "open: Apple Developer Documentation"]]
                 ;[:w [:km "open: Swift Documentation"]]
                 ;[:f [:km "web: Swift Forums"]]
                 ; TODO: add binds for doc search fast
                 ;[:q [:km "web: AWS Docs and search"]]
                 ;[:w [:km "web: Expo Docs and search"]]
                 ;[:e [:km "web: EdgeDB Docs and search"]]
                 ;[:r [:km "web: RN Docs and search"]]
                 ;[:a [:km "web: React Docs and search"]]
                 ;[:s [:km "web: Legend State Docs and search"]]
                 ;[:d [:km "web: Encore Docs and search"]]
                 ;[:f [:km "web: Next Docs and search"]]
                 ;[:c [:km "web: Cloudflare Docs and search"]]
                 ;[:v [:km "web: Orama Docs and search"]]
                 ;[:3 [:alfred "search alfred" "nikivi.utilities" "d3 "]]
                 ;[:q [:alfred "search alfred" "nikivi.utilities" "tldr "]]
                 ;[:w [:alfred "search alfred" "nikivi.utilities" "django "]]
                 ;[:w [:alfred "search alfred" "nikivi.utilities" "ts "]]
                 ;[:e [:alfred "search alfred" "nikivi.utilities" "html "]]
                 ;[:r [:alfred "search alfred" "nikivi.utilities" "react "]]
                 ;[:a [:alfred "search alfred" "nikivi.utilities" "rust "]]
                 ;[:a [:alfred "search alfred" "nikivi.utilities" "man "]]
                 ;[:d [:alfred "search alfred" "nikivi.utilities" "docker "]]
                 ;[:f [:alfred "search alfred" "nikivi.utilities" "apple "]]
                 ;[:s [:alfred "search alfred" "nikivi.utilities" "lodash "]]
                 ;[:d [:alfred "search alfred" "nikivi.utilities" "node "]]
                 ;[:g [:alfred "search alfred" "nikivi.utilities" "godoc "]]
                 ;[:c [:alfred "search alfred" "nikivi.utilities" "css "]]
                 ;[:v [:alfred "search alfred" "nikivi.utilities" "vim "]]
                 ;[:b [:alfred "search alfred" "nikivi.utilities" "bash "]]
                 ;[:spacebar :!OSC1]]} ; Open Dash
        {:des "commakey (gh workspaces)"
         :rules [:comma-mode
                 ]}
                 ;[:q [:km "cursor: sqlsync-gh"]]
                 ;[:e [:km "cursor: element-x-gh"]]
                 ;[:r [:km "cursor: clerk-gh"]]
                 ;[:t [:km "cursor: statshouse-gh"]]
                 ;[:a [:km "cursor: near-gh"]]
                 ;[:s [:km "cursor: sonic-go-gh"]]
                 ;[:d [:km "cursor: ui-tars-desktop-gh"]]
                 ;[:d [:km "cursor: deerflow-gh"]]
                 ;[:z [:km "cursor: tvl-gh"]]
                 ;[:x [:km "cursor: perplexica-gh"]]
                 ;[:c [:km "cursor: clickhouse-gh"]]
                 ;[:v [:km "cursor: vkui-gh"]]
                 ;[:b [:km "cursor: snix-gh"]]
                 ;[:spacebar [:km "cursor: alien-signals-gh"]]
                 ;[:w [:n :i :k :i :v]] ; -> nikiv
                 ;[:a [:n :i :k :i :t :a :v :o :l :o :b :o :e :v ]] ; -> nikitavoloboev
        {:des "slashkey (gh workspaces)"
         :rules [:slash-mode
                 [:r [:km "cursor: gorealeaser-gh"]]
                 [:t [:km "cursor: tvix-gh"]]
                 [:y [:km "cursor: yaak-gh"]]
                 [:u [:km "cursor: supabase-gh"]]
                 [:i [:km "cursor: nixpkgs-gh"]]
                 [:o [:km "cursor: flox-gh"]]
                 [:p [:km "cursor: pydantic-ai-gh"]]
                 [:d [:km "cursor: codanna-gh"]]
                 [:h [:km "cursor: ghostty-gh"]]
                 [:g [:km "cursor: gensx-gh"]]
                 [:h [:km "cursor: helix-db-gh"]]
                 [:j [:km "cursor: deno-std-gh"]]
                 [:k [:km "cursor: dspy-gh"]]
                 [:l [:km "cursor: gel-gh"]]
                 [:quote [:km "cursor: meilisearch-gh"]]
                 [:c [:km "cursor: connar-gh"]]
                 [:v [:km "cursor: n8n-gh"]]
                 [:b [:km "cursor: grafbase-gh"]]
                 [:n [:km "cursor: inngest-gh"]]
                 [:m [:km "cursor: victoria-metrics-gh"]]
                 [:slash [:km "cursor: deno-gh"]]
                 [:period [:km "cursor: ts-pattern-gh"]] ; with github.com/aidenybai/pattycake TODO: move this prob
                 [:spacebar [:km "cursor: jsr-gh"]]
                 [:w [:km "cursor: swift-gh"]]
                 ]}
                 ;[:slash [:km "edit: run.odin"]]
                 ;[:1 [:km "cursor: 1password-gh"]]
                 ;[:q [:km "cursor: qdrant-gh"]]
                 ;[:w [:km "cursor: steel-gh"]]
                 ;[:e [:km "cursor: changesets-gh"]]
                 ;[:r [:km "cursor: polars-gh"]]
                 ;[:t [:km "cursor: ty-gh"]]
                 ;[:escape [:km "cursor: prime-gh"]]
                 ;[:a [:km "cursor: lightrag-gh"]]
                 ;[:s [:km "cursor: supabase-gh"]]
                 ;[:d [:km "cursor: modal-gh"]]
                 ;[:f [:km "cursor: ruff-gh"]]
                 ;[:g [:km "cursor: legend-photos-gh"]]
                 ;[:z [:km "cursor: iceoryx2-gh"]]
                 ;[:x [:km "cursor: cachix-gh"]]
                 ;[:c [:km "cursor: prefect-gh"]]
                 ;[:v [:km "cursor: uv-gh"]]
                 ;[:b [:km "cursor: ploomber-gh"]]
                 ;[:spacebar [:km "cursor: neon-gh"]]
                 ; TODO: add ibis
                 ;[:t [:km "cursor: kotlin."]]
                 ;[:e [:km "cursor: lean."]]
                 ;[:r [:km "cursor: ruby."]]
         {:des "dotkey (1-3, q-u, caps, tab)"
          :rules [:dot-mode
                  [:1 [:c :l :o :s :e :spacebar :!S3]] ; -> close #
                  [:2 [:r :e :f :spacebar :!S3]] ; -> ref #
                  [:3 [:f :i :x :spacebar :!S3]] ; -> fix #
                  [:q [:!Sa :spacebar :slash :slash :spacebar]] ; -> // (on same line)
                  [:w [:km "Comment on top of line"]]
                  [:e [:!St :!So :!Sd :!So :!Ssemicolon :spacebar]] ; -> TODO:
                  [:left_command [:km "enter: correct?"]]
                  [:spacebar [:km "enter: explain"]]
                  [:caps_lock [:!Cf :!St :!So :!Sd :!So :!Ssemicolon :return_or_enter]] ; -> search TODO: in file
                  [:u [:u :p :d :a :t :e :spacebar]] ; -> update
                  ]}
                  ;[:k [:p :l :s :return_or_enter]] ; -> pls
                  ;[:r [:!Sn :!So :!St :!Se :!Ssemicolon :spacebar]] ; -> NOTE: | TODO: is NOTE: ever useful?
                  ;[:grave_accent_and_tilde [:!CSf :!St :!So :!Sd :!So :!Ssemicolon :return_or_enter]] ; -> search TODO: globally
                  ;[:spacebar [:km "paste: Thanks ♥️"]]]} ; -> Thanks ♥️ (TODO: change to something code related and useful)
         {:des "tsdot"
          :rules [:ts-mode
                  [:a [:c :o :n :s :o :l :e :period :l :o :g :!S9 :!S0 :left_arrow]] ; -> console.log()
                  [:s [:equal_sign :!Speriod :spacebar]] ; -> =>
                  [:d [:r :e :t :u :r :n :spacebar]] ; -> return
                  [:f [:c :o :n :s :t :spacebar]] ; -> const
                  [:g [:!Cf :c :o :n :s :o :l :e :period :l :o :g :!S9 :return_or_enter]] ; -> search console.log( in file
                  [:j [:right_arrow :spacebar :equal_sign :spacebar]] ; -> =
                  [:k [:right_arrow :spacebar :!Sopen_bracket :return_or_enter]] ; -> {  }
                  [:z [:spacebar :s :t :y :l :e :equal_sign :!Sopen_bracket :!Sopen_bracket :!Sclose_bracket :!Sclose_bracket :left_arrow :left_arrow]] ; -> style={{}}
                  [:x [:p :r :o :c :e :s :s :period :e :n :v :period]] ; -> process.env.
                  [:c [:spacebar :c :l :a :s :s :!Sn :a :m :e :equal_sign :!Squote :!Squote :left_arrow]] ; -> className=""
                  [:tab [:a :s :y :n :c :spacebar]] ; -> async
                  [:escape [:a :w :a :i :t :spacebar]] ; -> await
                  [:v [:t :y :p :e :s :c :r :i :p :t :spacebar]] ; -> typescript
                  ]}
                  ;[:left_command [:p :r :o :p :s :period]] ; -> props.
                  ;[:tab [:f :u :n :c :t :i :o :n :spacebar]] ; -> function
                  ;[:tab [:a :s :y :n :c :spacebar :f :u :n :c :t :i :o :n :spacebar]] ; -> async function
                  ;[:left_command [:spacebar :equal_sign :spacebar]] ; -> =
                  ;[:grave_accent_and_tilde [:period :s :e :t :!S9 :!S0 :left_arrow]] ; -> .set()
                  ;[:left_command [:period :g :e :t :!S9 :!S0]] ; -> .get()
                  ;[:n [:j :a :v :a :s :c :r :i :p :t :spacebar]] ; -> javascript
                  ;[:c [:spacebar :c :l :a :s :s :equal_sign :!Squote :!Squote :left_arrow]] ; -> class=""
                  ;[:z [:c :o :n :s :o :l :e :period :e :r :r :o :r :!S9 :!S0 :left_arrow]] ; -> console.error()
                  ;[:tab [:km "w: MDN"]]
                  ;[:a [:km "console.log()"]]
                  ;[:a [:c :o :n :s :o :l :e :period :w :a :r :n :!S9 :!S0 :left_arrow]] ; -> console.warn()
                  ;[:f [:!Cf :c :o :n :s :o :l :e :period :w :a :r :n :!S9 :return_or_enter]] ; -> search console.warn( in file
                  ;[:g [:right_arrow :spacebar :equal_sign :!Speriod :spacebar :!Sopen_bracket :return_or_enter]] ; -> => {}
                  ;[:c [:spacebar :s :t :y :l :e :equal_sign :!Sopen_bracket :!Sopen_bracket :!Sclose_bracket :!Sclose_bracket :left_arrow :left_arrow]] ; -> style={{}}
                  ;[:spacebar [:l :o :c :a :l :period]]]} ; -> local.
                  ;[:spacebar [:s :t :a :t :e :period]]]} ; -> state.
        {:des "godot"
         :rules [:go-mode
                [:tab [:km "w: GoDoc"]]
                [:a [:f :m :t :period :!Sp :r :i :n :t :l :n :!S9 :!S0 :left_arrow]] ; -> fmt.Println()
                [:s [:!Ssemicolon :equal_sign :spacebar]] ; -> :=
                [:d [:r :e :t :u :r :n :spacebar]] ; -> return
                [:f [:!Cf :f :m :t :period :p :return_or_enter]] ; -> search fmt.p in file
                [:g [:i :f :spacebar :e :r :r :spacebar :!S1 :equal_sign :spacebar :n :i :l :spacebar :!Sopen_bracket :return_or_enter]] ; -> if err != nil {}
                [:j [:grave_accent_and_tilde :j :s :o :n :!Ssemicolon :!Squote :!Squote :grave_accent_and_tilde :left_arrow :left_arrow]] ; -> `json:""`
                [:z [:l :o :g :period :!Sp :r :i :n :t :l :n :!S9 :!S0 :left_arrow]] ; -> log.Println()
                [:x [:f :m :t :period :!Sp :r :i :n :t :l :n :!S9 :!S0 :left_arrow :!Squote :hyphen :hyphen]] ; -> fmt.Println("--")
                [:c [:!STsemicolon]] ; Selection -> Go Playground
                [:v [:g :o :l :a :n :g :spacebar]] ; -> golang
                [:b [:l :o :g :period :!Sf :a :t :a :l :!S9 :e :r :r :!S0]] ; -> log.Fatal(err)
                ]}
        {:des "pydot"
          :rules [:py-mode
                 [:a [:p :r :i :n :t :!S9 :!S0 :left_arrow]] ; -> print()
                 [:s [:hyphen :!Speriod]] ; -> ->
                 [:d [:r :e :t :u :r :n :spacebar]] ; -> return
                 [:v [:p :y :t :h :o :n :spacebar]] ; -> python
                 ]}
        {:des "swiftdot"
         :rules [:swift-mode
                [:a [:p :r :i :n :t :!S9 :!S0 :left_arrow]] ; -> print()
                [:v [:s :w :i :f :t :spacebar]] ; -> swift
                ]}
        {:des "rustdot"
          :rules [:rust-mode
                 [:a [:l :o :g :!S1 :!S9 :!S0 :semicolon :left_arrow :left_arrow]] ; -> log!();
                 [:s [:a :s :s :e :r :t :!Shyphen :e :q :!S1 :!S9]] ; assert_eq!();
                 [:d [:hyphen :!Speriod :spacebar]] ; ->
                 [:f [:p :r :i :n :t :l :n :!S1 :!S9 :!S0 :semicolon :left_arrow :left_arrow :!Squote :!Sopen_bracket :!Ssemicolon :!Sslash :!Sclose_bracket :right_arrow :comma :spacebar]] ; -> println!("{:?}", );
                 [:v [:r :u :s :t :spacebar]] ; -> rust
                 ]}
                 ;[:f [:l :o :g :!S1 :!S9 :!S0 :semicolon :left_arrow :left_arrow]] ; -> log!();
                 ;[:a [:p :r :i :n :t :l :n :!S1 :!S9 :!S0 :semicolon :left_arrow :left_arrow :!Squote :!Sopen_bracket :!Sclose_bracket :right_arrow :comma :spacebar]] ; -> println!("{}", )
        {:des "leftControlKey (gh workspaces)"
         :rules [:left-control-mode
                 [:e [:km "cursor: openai-evals-gh."]]
                 [:r [:km "cursor: swift-subprocess-gh."]]
                 [:t [:km "cursor: tiktoken-gh."]]
                 [:y [:km "cursor: yt-dlp-gh."]]
                 [:u [:km "cursor: just-gh."]]
                 [:i [:km "cursor: sqlite-utils-gh."]]
                 [:o [:km "cursor: codex-gh."]]
                 [:a [:km "cursor: optax-gh."]]
                 [:s [:km "cursor: datasette-gh."]]
                 [:d [:km "cursor: claude-coder-gh."]]
                 [:f [:km "cursor: fish-gh."]]
                 [:h [:km "cursor: helix-gh."]]
                 [:j [:km "cursor: jj-gh."]]
                 [:k [:km "cursor: scrapling-gh."]]
                 [:l [:km "cursor: simonw-llm-gh."]]
                 [:semicolon [:km "cursor: roo-code-gh."]]
                 [:c [:km "cursor: claude-code-gh."]]
                 [:v [:km "cursor: llvm-gh."]]
                 [:b [:km "cursor: blender-gh."]]
                 [:n [:km "cursor: tapnet-gh."]]
                 [:m [:km "cursor: mujoco-warp-gh."]]
                 [:period [:km "cursor: crawl4ai-gh."]]
                 [:spacebar [:km "cursor: openai-realtime-agents-gh."]]
                 ]}
        {:des "spacekey"
         :rules [:spacebar-mode
                 [:1 :!TOSq] ; Screenshot and recording options (system settings > keyboard > screenshots)
                 [:2 :!CS4] ; Save picture of selected area as a file (~/Desktop) (system settings > keyboard > screenshots)
                 [:3 :!TOS9] ; Copy picture of screen to the clipboard (system settings > keyboard > screenshots)
                 [:4 :!CS3] ; Save picture of screen as a file (~/Desktop) (system settings > keyboard > screenshots)
                 [:q [:km "open: CleanShot"]]
                 [:w :!TO3] ; Screenshot -> CleanShot
                 [:e :!TO2] ; Copy picture of selected area to the clipboard (system settings > keyboard > screenshots) TODO: got moved to e+space, is it ok?
                 [:r :!CS7] ; TRex get text from screenshot
                 [:t [:km "w: X (personal)"]]
                 [:tab [:km "Screenshot into Claude"]] ; TODO: use openai
                 [:escape :!CS8] ; Screenshot -> Eagle ; TODO: use genx, add as metadata url/app it's taken from. do another for video too, mby from cleanshot
                 [:a :!CTO0] ; Search Alfred Snippets
                 [:s :!CTOSF1] ; SuperCut start/stop recording
                 [:d :!CTOSF3] ; SuperCut cancel recording
                 [:f :!CS9] ; CleanShot screen recording
                 [:g [:km "web: GitHub (personal)"]]
                 [:h [:raycast "loris/safari/search-history"]] ; TODO: search LA bookmarks
                 [:u [:km "open: Arc"]]
                 [:i [:alfred "list_windows_of_active_app" "com.alfredapp.vitor.windowswitcher"]]
                 [:o [:km "open: X Feed (in Arc)"]]
                 [:p [:km "open: X profile (in Arc)"]]
                 [:comma [:km "Select line & move to Claude"]] ; TODO: find better bind
                 [:j [:km "open: Discord"]]
                 [:k [:km "open: Comet"]]
                 [:l [:km "open: Telegram"]]
                 [:semicolon [:!TOe :!TOe]] ; monologue (TODO: move to own solution)
                 [:quote [:km "open: GitHub (in Arc)"]]
                 [:c [:km "Clone/open repo in ~/gh/"]] ; TODO: no point as it should be under safari/chrome bind
                 [:v [:km "Clone/open repo in ~/gh/ with Cursor"]] ; TODO: no point as it should be under safari/chrome bind
                 [:b [:km "open: IG Messages (in Arc)"]]
                 [:n [:km "open: X Messages (in Arc)"]]
                 [:m :!TSC0] ; Raycast: Search open tabs TODO: fix wrong safari tab from showing up TODO: combine it with LA bookmarks? all in one thing? should include bookmarks
                 [:period [:km "open: Dia"]] ; TODO: move to other key prob
                 [:slash [:km "open: Discord (in Arc)"]]
                 ]}
                 ;[:period :!TOCclose_bracket] ; contexts window search (only cursor for now) TODO: make generic, good (custom app, friendik) (TODO: modify it so I can search repos to open too)
                 ;[:quote [:km "open: Safari Technology Preview"]]
                 ;[:p [:km "web: SuperCut workspace"]]
                 ;[:a [:km "open: X Pro (search or post)"]]
                 ;[:n [:raycast "loris/safari/search-bookmarks"]] ; TODO: bind to LA bookmarks
                 ;[:period [:km "open: Safari Technology Preview"]]
                 ;[:k :!TOe] ; Start/Stop Wispr Flow hands-free transcription (TODO: move to own solution)
                 ;[:quote [:km "open: Chrome Canary (x.com > account switch)"]]
                 ;[:slash [:km "w: GitHub PR"]] ; TODO:
                 ;[:d :!CTOSF2] ; SuperCut finish recording TODO: hope supercut adds a way to finish recording from the `start recording` bind itself. this one would be `pause` bind then
                 ;[:d :!CTOSF5] ; SuperCut pause recording ; TODO: move it to `:s` once supercut adds a way to override the `start recording` bind to finish recording too
                 ;[:z :!CTOSF4] ; SuperCut restart recording
                 ;[:period [:km "open: X Pro (post)"]] ; TODO: replace with typefully like service for `just post` or `new ..` (rally to X, bluesky, LA etc.)
                 ;[:h [:km "web: GitHub Learn Anything"]]
                 ;[:period [:km "open: Typefully"]]
                 ;[:semicolon :!Cgrave_accent_and_tilde] ; Switch between active windows (go down)
                 ;[:r :!CS7] ; TRex get text from screenshot ; TODO: bind to nice key
                 ;[:n :!CTequal_sign] ; Anybox search
                 ;[:escape [:km "Entire Screen into ChatGPT and explain"]]
                 ;[:grave_accent_and_tilde [:km "Screenshot into ChatGPT and explain"]]
                 ;[:u [:km "Select word & search in Dash"]]
                 ;[:i [:km "Select word & move to Claude"]]
                 ;[:k :!Ctab]
                 ;[:tab [:km "Start Screen Studio (record entire display)"]]
                 ;[:m [:km "Search Cursor windows"]]
                 ;[:n [:km "Select word & move to Claude"]]
                 ;[:escape [:km "New tweet with clipboard (image or text)"]]
                 ;[:l [:alfred "search" "com.renfei.SnippetsLab.AlfredWorkflow"]]
                 ;[:n [:km "New tweet with @"]]
                 ;[:m [:km "New tweet with current URL"]]
                 ;[:l [:km "New LA post"]]
                 ;[:k [:km "w: GitHub"]]
                 ;[:l [:km "w: Localhost"]]
                 ;[:l [:km "w: Learn Anything"]]
                 ;[:semicolon :semicolon]
                 ;[:semicolon [:km "w: StackBlitz"]]
                 ;[:semicolon ["~/.kit/kar Test"]]
                 ;[:b [:km "w: Digital Ocean"]]
                 ;[:m [:km "w: AWS"]]
                 ;[:comma [:km "w: Diagrams"]]
                 ;[:n [:km "New 2Do task"]]
                 ;[:m [:km "New Linear task"]]
                 ;[:tab :!CO5] ; TODO: Configure ScreenFlow recording
                 ;[:t [:km "w: YouTube submit"]]
                 ;[:t :!TOCp] ; Screenshot -> Imgur
                 ;[:t :!TOCp] ; Screenshot -> Imgur (auth)
                 ;[:t :!COS4] ; Screenshot -> CleanShot (cloud)
                 ;[:i [:km "w: Google Sheets"]]
                 ;[:o [:km "w: Google Docs"]]
                 ;[:o [:km "open: GraphQL"]]
                 ;[:i [:km "Midjourney Imagine"]]
                 ;[:o [:km "w: Stack Overflow question"]]
                 ;[:p [:km "w: CodePen New"]]
                 ;[:open_bracket [:km "w: Google Slides"]]
                 ;[:close_bracket [:km "w: Beautiful.ai"]]
                 ;[:a [:km "OBS stream scene on"]]
                 ;[:s [:km "OBS stream scene off"]]
                 ;[:s [:t :h :a :n :k :s]] ; -> thanks
                 ;[:escape :!CTOSi] ; Screen Studio (record entire display)
                 ;[:s :!CTOSg] ; Screen Studio recording
                 ;[:f :!CTOS7] ; Screen Studio area recording
                 ;[:a :!CTOSi] ; OBS stream scene on
                 ;[:s :!CTOSo] ; OBS stream scene off
                 ;[:a :!TO4] ; CleanShot recording
                 ;[:s :!CO5] ; TODO: Pause/unpause ScreenFlow recording
                 ;[:f [:km "open: ChatGPT"]]
                 ;[:f [:km "Copy text to ChatGPT"]]
                 ;[:g :!CO5] ; Start/stop ScreenFlow recording
                 ;[:h [:km "w: Roam Research"]]
                 ;[:j [:km "open: Typefully"]] ; or start writing tweet
                 ;[:j [:km "open: ChatGPT"]]
                 ;[:h [:km "w: GitHub (notifications)"]] ; TODO: jump between GitHub (issues/prs)
                 ;[:h [:km "w: HN submit"]]
                 ;[:k :!COS9] ; Raycast
                 ;[:k [:open "raycast://extensions/loris/safari/cloud-tabs"]] ; TODO: improve on it, slow
                 ;[:m [:km "New Mastodon post"]]
        {:des "rightCommandKey (gh workspaces)"
         :rules [:right-command-mode
                 [:e [:km "cursor: repomix-gh"]]
                 [:r [:km "cursor: orama-gh"]]
                 [:t [:km "cursor: nativelink-gh"]]
                 [:a [:km "cursor: karabiner-elements-gh"]]
                 [:s [:km "cursor: semhash-gh"]]
                 [:f [:km "cursor: skift-gh"]] ; https://github.com/skift-org/skift
                 [:c [:km "cursor: act-gh"]]
                 [:v [:km "cursor: vaev-gh"]] ; https://github.com/skift-org/vaev
                 [:b [:km "cursor: browser-ui-gh"]] ; https://github.com/DanielSRS/BrowserUI
                 ]}
        ; TODO: did not work well..
        ;{:des "left cmd -> cmd+tab"
         ;:rules [[:left_command :left_command nil {:alone :!Ctab}]]}
]}
